{"ast":null,"code":"/**\n * Copyright (c) 2022\n *\n * TypeScript type definitions for ThoughtSpot Visual Embed SDK\n *\n * @summary Type definitions for Embed SDK\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\n\n/**\n * The authentication mechanism for allowing access to the\n * the embedded app\n */\n// eslint-disable-next-line no-shadow\nexport var AuthType;\n\n(function (AuthType) {\n  /**\n   * No authentication. Use this only for testing purposes.\n   */\n  AuthType[\"None\"] = \"None\";\n  /**\n   * SSO using SAML\n   */\n\n  AuthType[\"SSO\"] = \"SSO_SAML\";\n  /**\n   * SSO using OIDC\n   */\n\n  AuthType[\"OIDC\"] = \"SSO_OIDC\";\n  /**\n   * Trusted authentication server\n   */\n\n  AuthType[\"AuthServer\"] = \"AuthServer\";\n  /**\n   * Use the ThoughtSpot login API to authenticate to the cluster directly.\n   *\n   * Warning: This feature is primarily intended for developer testing. It is\n   * strongly advised not to use this authentication method in production.\n   */\n\n  AuthType[\"Basic\"] = \"Basic\";\n})(AuthType || (AuthType = {}));\n/**\n * A map of the supported runtime filter operations\n */\n// eslint-disable-next-line no-shadow\n\n\nexport var RuntimeFilterOp;\n\n(function (RuntimeFilterOp) {\n  /**\n   * Equals\n   */\n  RuntimeFilterOp[\"EQ\"] = \"EQ\";\n  /**\n   * Does not equal\n   */\n\n  RuntimeFilterOp[\"NE\"] = \"NE\";\n  /**\n   * Less than\n   */\n\n  RuntimeFilterOp[\"LT\"] = \"LT\";\n  /**\n   * Less than or equal to\n   */\n\n  RuntimeFilterOp[\"LE\"] = \"LE\";\n  /**\n   * Greater than\n   */\n\n  RuntimeFilterOp[\"GT\"] = \"GT\";\n  /**\n   * Greater than or equal to\n   */\n\n  RuntimeFilterOp[\"GE\"] = \"GE\";\n  /**\n   * Contains\n   */\n\n  RuntimeFilterOp[\"CONTAINS\"] = \"CONTAINS\";\n  /**\n   * Begins with\n   */\n\n  RuntimeFilterOp[\"BEGINS_WITH\"] = \"BEGINS_WITH\";\n  /**\n   * Ends with\n   */\n\n  RuntimeFilterOp[\"ENDS_WITH\"] = \"ENDS_WITH\";\n  /**\n   * Between, inclusive of higher value\n   */\n\n  RuntimeFilterOp[\"BW_INC_MAX\"] = \"BW_INC_MAX\";\n  /**\n   * Between, inclusive of lower value\n   */\n\n  RuntimeFilterOp[\"BW_INC_MIN\"] = \"BW_INC_MIN\";\n  /**\n   * Between, inclusive of both higher and lower value\n   */\n\n  RuntimeFilterOp[\"BW_INC\"] = \"BW_INC\";\n  /**\n   * Between, non-inclusive\n   */\n\n  RuntimeFilterOp[\"BW\"] = \"BW\";\n  /**\n   * Is included in this list of values\n   */\n\n  RuntimeFilterOp[\"IN\"] = \"IN\";\n})(RuntimeFilterOp || (RuntimeFilterOp = {}));\n/**\n * Event types emitted by the embedded ThoughtSpot application.\n */\n// eslint-disable-next-line no-shadow\n\n\nexport var EmbedEvent;\n\n(function (EmbedEvent) {\n  /**\n   * Rendering has initialized.\n   * @return timestamp - The timestamp when the event was generated.\n   */\n  EmbedEvent[\"Init\"] = \"init\";\n  /**\n   * Authentication has either succeeded or failed.\n   * @return isLoggedIn - A Boolean specifying whether authentication was successful.\n   */\n\n  EmbedEvent[\"AuthInit\"] = \"authInit\";\n  /**\n   * The embed object container has loaded.\n   * @return timestamp - The timestamp when the event was generated.\n   */\n\n  EmbedEvent[\"Load\"] = \"load\";\n  /**\n   * Data pertaining to answer or Liveboard is received\n   * @return data - The answer or Liveboard data\n   */\n\n  EmbedEvent[\"Data\"] = \"data\";\n  /**\n   * Search/answer/Liveboard filters have been applied/updated\n   * @hidden\n   */\n\n  EmbedEvent[\"FiltersChanged\"] = \"filtersChanged\";\n  /**\n   * Search query has been updated\n   */\n\n  EmbedEvent[\"QueryChanged\"] = \"queryChanged\";\n  /**\n   * A drill down operation has been performed.\n   * @return additionalFilters - Any additional filters applied\n   * @return drillDownColumns - The columns on which drill down was performed\n   * @return nonFilteredColumns - The columns that were not filtered\n   */\n\n  EmbedEvent[\"Drilldown\"] = \"drillDown\";\n  /**\n   * One or more data sources have been selected.\n   * @return dataSourceIds - the list of data sources\n   */\n\n  EmbedEvent[\"DataSourceSelected\"] = \"dataSourceSelected\";\n  /**\n   * One or more data columns have been selected.\n   * @return columnIds - the list of columns\n   * @version SDK: 1.10.0 | ThoughtSpot: 8.2.0.cl\n   */\n\n  EmbedEvent[\"AddRemoveColumns\"] = \"addRemoveColumns\";\n  /**\n   * A custom action has been triggered\n   * @return actionId - The id of the custom action\n   * @return data - The answer or Liveboard data\n   */\n\n  EmbedEvent[\"CustomAction\"] = \"customAction\";\n  /**\n   * A double click has been triggered on table/chart\n   * @return ContextMenuInputPoints - data point that is double clicked\n   * @version 1.5.0 or later\n   */\n\n  EmbedEvent[\"VizPointDoubleClick\"] = \"vizPointDoubleClick\";\n  /**\n   * An error has occurred.\n   * @return error - An error object or message\n   */\n\n  EmbedEvent[\"Error\"] = \"Error\";\n  /**\n   * The embedded object has sent an alert\n   * @return alert - An alert object\n   */\n\n  EmbedEvent[\"Alert\"] = \"alert\";\n  /**\n   * The ThoughtSpot auth session has expired.\n   */\n\n  EmbedEvent[\"AuthExpire\"] = \"ThoughtspotAuthExpired\";\n  /**\n   * The height of the embedded Liveboard or visualization has been computed.\n   * @return data - The height of the embedded Liveboard or visualization\n   * @hidden\n   */\n\n  EmbedEvent[\"EmbedHeight\"] = \"EMBED_HEIGHT\";\n  /**\n   * The center of visible iframe viewport is calculated.\n   * @return data - The center of the visible Iframe viewport.\n   * @hidden\n   */\n\n  EmbedEvent[\"EmbedIframeCenter\"] = \"EmbedIframeCenter\";\n  /**\n   * Detects the route change.\n   */\n\n  EmbedEvent[\"RouteChange\"] = \"ROUTE_CHANGE\";\n  /**\n   * The v1 event type for Data\n   * @hidden\n   */\n\n  EmbedEvent[\"V1Data\"] = \"exportVizDataToParent\";\n  /**\n   * Emitted when the embed does not have cookie access. This\n   * happens on Safari where third-party cookies are blocked by default.\n   *\n   * @version 1.1.0 or later\n   */\n\n  EmbedEvent[\"NoCookieAccess\"] = \"noCookieAccess\";\n  /**\n   * Emitted when SAML is complete\n   * @private\n   * @hidden\n   */\n\n  EmbedEvent[\"SAMLComplete\"] = \"samlComplete\";\n  /**\n   * Emitted when any modal is opened in the app\n   * @version 1.6.0 or later\n   */\n\n  EmbedEvent[\"DialogOpen\"] = \"dialog-open\";\n  /**\n   * Emitted when any modal is closed in the app\n   * @version 1.6.0 or later\n   */\n\n  EmbedEvent[\"DialogClose\"] = \"dialog-close\";\n  /**\n   * Emitted when a liveboard has completed rendering,\n   * this event can be used as a hook to trigger events on the\n   * rendered liveboard\n   * @version 1.9.1 or later\n   */\n\n  EmbedEvent[\"LiveboardRendered\"] = \"PinboardRendered\";\n})(EmbedEvent || (EmbedEvent = {}));\n/**\n * Event types that can be triggered by the host application\n * to the embedded ThoughtSpot app\n *\n * To trigger an event use the corresponding\n * {@link LiveboardEmbed.trigger} or {@link AppEmbed.trigger} or {@link SearchEmbed.trigger} method.\n */\n// eslint-disable-next-line no-shadow\n\n\nexport var HostEvent;\n\n(function (HostEvent) {\n  /**\n   * Trigger a search\n   * @param dataSourceIds - The list of data source GUIDs\n   * @param searchQuery - The search query\n   */\n  HostEvent[\"Search\"] = \"search\";\n  /**\n   * Trigger a drill on certain points by certain column\n   * @param points - an object containing selectedPoints/clickedPoints\n   *              eg. { selectedPoints: []}\n   * @param columnGuid - a string guid of the column to drill by. This is optional,\n   *                     if not provided it will auto drill by the configured column. \\\n   * @version 1.5.0 or later\n   */\n\n  HostEvent[\"DrillDown\"] = \"triggerDrillDown\";\n  /**\n   * Apply filters\n   * @hidden\n   */\n\n  HostEvent[\"Filter\"] = \"filter\";\n  /**\n   * Reload the answer or visualization\n   * @hidden\n   */\n\n  HostEvent[\"Reload\"] = \"reload\";\n  /**\n   * Set the visible visualizations on a Liveboard.\n   * @param - an array of ids of visualizations to show, the ids not passed\n   *          will be hidden.\n   * @version 1.6.0 or later\n   */\n\n  HostEvent[\"SetVisibleVizs\"] = \"SetPinboardVisibleVizs\";\n  /**\n   * Update the runtime filters. The runtime filters passed here are extended\n   * on to the existing runtime filters if they exist.\n   * @param - {@link RuntimeFilter}[] an array of {@link RuntimeFilter} Types.\n   * @version SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl\n   */\n\n  HostEvent[\"UpdateRuntimeFilters\"] = \"UpdateRuntimeFilters\";\n})(HostEvent || (HostEvent = {}));\n/**\n * The different visual modes that the data sources panel within\n * search could appear in, i.e., hidden, collapsed, or expanded.\n */\n// eslint-disable-next-line no-shadow\n\n\nexport var DataSourceVisualMode;\n\n(function (DataSourceVisualMode) {\n  /**\n   * Data source panel is hidden.\n   */\n  DataSourceVisualMode[\"Hidden\"] = \"hide\";\n  /**\n   * Data source panel is collapsed, but the user can manually expand it.\n   */\n\n  DataSourceVisualMode[\"Collapsed\"] = \"collapse\";\n  /**\n   * Data source panel is expanded, but the user can manually collapse it.\n   */\n\n  DataSourceVisualMode[\"Expanded\"] = \"expand\";\n})(DataSourceVisualMode || (DataSourceVisualMode = {}));\n/**\n * The query params passed down to the embedded ThoughtSpot app\n * containing configuration and/or visual information.\n */\n// eslint-disable-next-line no-shadow\n\n\nexport var Param;\n\n(function (Param) {\n  Param[\"DataSources\"] = \"dataSources\";\n  Param[\"DataSourceMode\"] = \"dataSourceMode\";\n  Param[\"ExpandAllDataSource\"] = \"expandAllDataSource\";\n  Param[\"DisableActions\"] = \"disableAction\";\n  Param[\"DisableActionReason\"] = \"disableHint\";\n  Param[\"ForceTable\"] = \"forceTable\";\n  Param[\"preventLiveboardFilterRemoval\"] = \"preventPinboardFilterRemoval\";\n  Param[\"SearchQuery\"] = \"searchQuery\";\n  Param[\"HideActions\"] = \"hideAction\";\n  Param[\"HideObjects\"] = \"hideObjects\";\n  Param[\"HostAppUrl\"] = \"hostAppUrl\";\n  Param[\"EnableVizTransformations\"] = \"enableVizTransform\";\n  Param[\"EnableSearchAssist\"] = \"enableSearchAssist\";\n  Param[\"HideResult\"] = \"hideResult\";\n  Param[\"UseLastSelectedDataSource\"] = \"useLastSelectedSources\";\n  Param[\"Tag\"] = \"tag\";\n  Param[\"searchTokenString\"] = \"searchTokenString\";\n  Param[\"executeSearch\"] = \"executeSearch\";\n  Param[\"fullHeight\"] = \"isFullHeightPinboard\";\n  Param[\"livedBoardEmbed\"] = \"isLiveboardEmbed\";\n  Param[\"searchEmbed\"] = \"isSearchEmbed\";\n  Param[\"Version\"] = \"sdkVersion\";\n  Param[\"ViewPortHeight\"] = \"viewPortHeight\";\n  Param[\"ViewPortWidth\"] = \"viewPortWidth\";\n  Param[\"VisibleActions\"] = \"visibleAction\";\n  Param[\"CustomCSSUrl\"] = \"customCssUrl\";\n  Param[\"visibleVizs\"] = \"pinboardVisibleVizs\";\n  Param[\"DisableLoginRedirect\"] = \"disableLoginRedirect\";\n  Param[\"Locale\"] = \"locale\";\n})(Param || (Param = {}));\n/**\n * The list of actions that can be performed on visual ThoughtSpot\n * entities, such as answers and Liveboards.\n */\n// eslint-disable-next-line no-shadow\n\n\nexport var Action;\n\n(function (Action) {\n  Action[\"Save\"] = \"save\";\n  Action[\"Update\"] = \"update\";\n  Action[\"SaveUntitled\"] = \"saveUntitled\";\n  Action[\"SaveAsView\"] = \"saveAsView\";\n  Action[\"MakeACopy\"] = \"makeACopy\";\n  Action[\"EditACopy\"] = \"editACopy\";\n  Action[\"CopyLink\"] = \"embedDocument\";\n  Action[\"ResetLayout\"] = \"resetLayout\";\n  Action[\"Schedule\"] = \"subscription\";\n  Action[\"SchedulesList\"] = \"schedule-list\";\n  Action[\"Share\"] = \"share\";\n  Action[\"AddFilter\"] = \"addFilter\";\n  Action[\"ConfigureFilter\"] = \"configureFilter\";\n  Action[\"AddFormula\"] = \"addFormula\";\n  Action[\"SearchOnTop\"] = \"searchOnTop\";\n  Action[\"SpotIQAnalyze\"] = \"spotIQAnalyze\";\n  Action[\"ExplainInsight\"] = \"explainInsight\";\n  Action[\"SpotIQFollow\"] = \"spotIQFollow\";\n  Action[\"ShareViz\"] = \"shareViz\";\n  Action[\"ReplaySearch\"] = \"replaySearch\";\n  Action[\"ShowUnderlyingData\"] = \"showUnderlyingData\";\n  Action[\"Download\"] = \"download\";\n  Action[\"DownloadAsPdf\"] = \"downloadAsPdf\";\n  Action[\"DownloadAsCsv\"] = \"downloadAsCSV\";\n  Action[\"DownloadAsXlsx\"] = \"downloadAsXLSX\";\n  Action[\"DownloadTrace\"] = \"downloadTrace\";\n  Action[\"ExportTML\"] = \"exportTSL\";\n  Action[\"ImportTML\"] = \"importTSL\";\n  Action[\"UpdateTML\"] = \"updateTSL\";\n  Action[\"EditTML\"] = \"editTSL\";\n  Action[\"Present\"] = \"present\";\n  Action[\"ToggleSize\"] = \"toggleSize\";\n  Action[\"Edit\"] = \"edit\";\n  Action[\"EditTitle\"] = \"editTitle\";\n  Action[\"Remove\"] = \"delete\";\n  Action[\"Ungroup\"] = \"ungroup\";\n  Action[\"Describe\"] = \"describe\";\n  Action[\"Relate\"] = \"relate\";\n  Action[\"CustomizeHeadlines\"] = \"customizeHeadlines\";\n  /**\n   * @hidden\n   */\n\n  Action[\"PinboardInfo\"] = \"pinboardInfo\";\n  Action[\"LiveboardInfo\"] = \"pinboardInfo\";\n  Action[\"SendAnswerFeedback\"] = \"sendFeedback\";\n  Action[\"DownloadEmbraceQueries\"] = \"downloadEmbraceQueries\";\n  Action[\"Pin\"] = \"pin\";\n  Action[\"AnalysisInfo\"] = \"analysisInfo\";\n  Action[\"Subscription\"] = \"subscription\";\n  Action[\"Explore\"] = \"explore\";\n  Action[\"DrillInclude\"] = \"context-menu-item-include\";\n  Action[\"DrillExclude\"] = \"context-menu-item-exclude\";\n  Action[\"CopyToClipboard\"] = \"context-menu-item-copy-to-clipboard\";\n  Action[\"CopyAndEdit\"] = \"context-menu-item-copy-and-edit\";\n  Action[\"DrillEdit\"] = \"context-menu-item-edit\";\n  Action[\"EditMeasure\"] = \"context-menu-item-edit-measure\";\n  Action[\"Separator\"] = \"context-menu-item-separator\";\n  Action[\"DrillDown\"] = \"DRILL\";\n  Action[\"RequestAccess\"] = \"requestAccess\";\n  Action[\"QueryDetailsButtons\"] = \"queryDetailsButtons\";\n  /**\n   * @version SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl\n   */\n\n  Action[\"Monitor\"] = \"createMonitor\";\n  /**\n   * @version SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl\n   */\n\n  Action[\"AnswerDelete\"] = \"onDeleteAnswer\";\n  /**\n   * @version SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl\n   */\n\n  Action[\"AnswerChartSwitcher\"] = \"answerChartSwitcher\";\n  /**\n   * @version SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl\n   */\n\n  Action[\"AddToFavorites\"] = \"addToFavorites\";\n  /**\n   * @version SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl\n   */\n\n  Action[\"EditDetails\"] = \"editDetails\";\n})(Action || (Action = {})); // eslint-disable-next-line no-shadow\n\n\nexport var OperationType;\n\n(function (OperationType) {\n  OperationType[\"GetChartWithData\"] = \"GetChartWithData\";\n  OperationType[\"GetTableWithHeadlineData\"] = \"GetTableWithHeadlineData\";\n})(OperationType || (OperationType = {}));","map":{"version":3,"mappings":"AAAA;;;;;;;;;AASA;;;;AAIA;AACA,WAAYA,QAAZ;;AAAA,WAAYA,QAAZ,EAAoB;AAChB;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACA;;;;;;;AAMAA;AACH,CAxBD,EAAYA,QAAQ,KAARA,QAAQ,MAApB;AA2JA;;;AAGA;;;AACA,WAAYC,eAAZ;;AAAA,WAAYA,eAAZ,EAA2B;AACvB;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACH,CAzDD,EAAYA,eAAe,KAAfA,eAAe,MAA3B;AA+EA;;;AAGA;;;AACA,WAAYC,UAAZ;;AAAA,WAAYA,UAAZ,EAAsB;AAClB;;;;AAIAA;AACA;;;;;AAIAA;AACA;;;;;AAIAA;AACA;;;;;AAIAA;AACA;;;;;AAIAA;AACA;;;;AAGAA;AACA;;;;;;;AAMAA;AACA;;;;;AAIAA;AACA;;;;;;AAKAA;AACA;;;;;;AAKAA;AACA;;;;;;AAKAA;AACA;;;;;AAIAA;AACA;;;;;AAIAA;AACA;;;;AAGAA;AACA;;;;;;AAKAA;AACA;;;;;;AAKAA;AACA;;;;AAGAA;AACA;;;;;AAIAA;AACA;;;;;;;AAMAA;AACA;;;;;;AAKAA;AACA;;;;;AAIAA;AACA;;;;;AAIAA;AACA;;;;;;;AAMAA;AACH,CA7HD,EAAYA,UAAU,KAAVA,UAAU,MAAtB;AA+HA;;;;;;;AAOA;;;AACA,WAAYC,SAAZ;;AAAA,WAAYA,SAAZ,EAAqB;AACjB;;;;;AAKAA;AACA;;;;;;;;;AAQAA;AACA;;;;;AAIAA;AACA;;;;;AAIAA;AACA;;;;;;;AAMAA;AACA;;;;;;;AAMAA;AACH,CAxCD,EAAYA,SAAS,KAATA,SAAS,MAArB;AA0CA;;;;AAIA;;;AACA,WAAYC,oBAAZ;;AAAA,WAAYA,oBAAZ,EAAgC;AAC5B;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACH,CAbD,EAAYA,oBAAoB,KAApBA,oBAAoB,MAAhC;AAeA;;;;AAIA;;;AACA,WAAYC,KAAZ;;AAAA,WAAYA,KAAZ,EAAiB;AACbA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACH,CA9BD,EAAYA,KAAK,KAALA,KAAK,MAAjB;AAgCA;;;;AAIA;;;AACA,WAAYC,MAAZ;;AAAA,WAAYA,MAAZ,EAAkB;AACdA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACA;;;;AAGAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACH,CAjFD,EAAYA,MAAM,KAANA,MAAM,MAAlB,E,CAyFA;;;AACA,WAAYC,aAAZ;;AAAA,WAAYA,aAAZ,EAAyB;AACrBA;AACAA;AACH,CAHD,EAAYA,aAAa,KAAbA,aAAa,MAAzB","names":["AuthType","RuntimeFilterOp","EmbedEvent","HostEvent","DataSourceVisualMode","Param","Action","OperationType"],"sources":["/Users/nathan.schroeder/Documents/dev/ts-integration-demo/node_modules/@thoughtspot/visual-embed-sdk/src/types.ts"],"sourcesContent":["/**\n * Copyright (c) 2022\n *\n * TypeScript type definitions for ThoughtSpot Visual Embed SDK\n *\n * @summary Type definitions for Embed SDK\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\n\n/**\n * The authentication mechanism for allowing access to the\n * the embedded app\n */\n// eslint-disable-next-line no-shadow\nexport enum AuthType {\n    /**\n     * No authentication. Use this only for testing purposes.\n     */\n    None = 'None',\n    /**\n     * SSO using SAML\n     */\n    SSO = 'SSO_SAML',\n    /**\n     * SSO using OIDC\n     */\n    OIDC = 'SSO_OIDC',\n    /**\n     * Trusted authentication server\n     */\n    AuthServer = 'AuthServer',\n    /**\n     * Use the ThoughtSpot login API to authenticate to the cluster directly.\n     *\n     * Warning: This feature is primarily intended for developer testing. It is\n     * strongly advised not to use this authentication method in production.\n     */\n    Basic = 'Basic',\n}\n\nexport type DOMSelector = string | HTMLElement;\n\n/**\n * The configuration object for embedding ThoughtSpot content.\n * It includes the ThoughtSpot hostname or IP address,\n * the type of authentication, and the authentication endpoint\n * if a trusted authentication server is used.\n */\nexport interface EmbedConfig {\n    /**\n     * The ThoughtSpot cluster hostname or IP address.\n     */\n    thoughtSpotHost: string;\n    /**\n     * The authentication mechanism to use.\n     */\n    authType: AuthType;\n    /**\n     * [AuthServer] The trusted authentication endpoint to use to get the\n     * authentication token. A GET request is made to the\n     * authentication API endpoint, which  returns the token\n     * as a plaintext response. For trusted authentication,\n     * the `authEndpoint` or `getAuthToken` attribute is required.\n     */\n    authEndpoint?: string;\n    /**\n     * [AuthServer] A function that invokes the trusted authentication endpoint\n     * and returns a Promise that resolves to the `auth token` string.\n     * For trusted authentication, the `authEndpoint` or `getAuthToken`\n     * attribute is required.\n     *\n     * It is advisable to fetch a new token inside this method and not\n     * reuse and older issued token, as because when auth expires this is\n     * called again and if it is called with an older token the authentication\n     * will not succeed.\n     */\n    getAuthToken?: () => Promise<string>;\n    /**\n     * [AuthServer / Basic] The user name of the ThoughtSpot user. This attribute is\n     * required for trusted authentication.\n     */\n    username?: string;\n\n    /**\n     * [Basic] The ThoughtSpot login password corresponding to the user name\n     *\n     * Warning: This feature is primarily intended for developer testing. It is\n     * strongly advised not to use this authentication method in production.\n     */\n    password?: string;\n\n    /**\n     * [SSO] For SSO Authentication, if `noRedirect` is set to true, it will open the SAML auth\n     * flow in a popup, instead of redirecting browser in place.\n     *\n     * @default false\n     */\n    noRedirect?: boolean;\n\n    /** @internal */\n    basepath?: string;\n\n    /**\n     * Should we encode URL Query Params using base64 encoding which thoughtspot\n     * will generate for embedding. This provides additional security to\n     * thoughtspot clusters against Cross site scripting attacks.\n     * @default false\n     */\n    shouldEncodeUrlQueryParams?: boolean;\n\n    /**\n     * Suppress cookie access alert when third party cookies are blocked by the user's browser.\n     * Third party cookie blocking is the default behaviour on Safari and opt-in for Firefox/Chrome.\n     * If you set this to `true`, you are encouraged to handle `noCookieAccess` event, to show your own treatment\n     * in this case.\n     * @default false\n     */\n    suppressNoCookieAccessAlert?: boolean;\n\n    /**\n     * Re-login when session expires with the previous login options\n     * @default false\n     */\n    autoLogin?: boolean;\n\n    /**\n     * Disable redirection to the login page when the embedded session expires\n     * This flag is typically used alongside the combination of auth modes such as {@link AuthType.AuthServer} and auto login behavior {@link EmbedConfig.autoLogin}\n     * @version SDK: 1.9.3 | ThoughtSpot: 8.1.0.cl\n     * @default false\n     */\n    disableLoginRedirect?: boolean;\n\n    /**\n     * Calls the prefetch method internally when set to true\n     * @default false\n     */\n    callPrefetch?: boolean;\n\n    /**\n     * When there are multiple embeds, queue the render of embed to start\n     *  after the previous embed's render is complete. This helps in the load performance\n     *  by decreasing the load on the browser.\n     * @version 1.5.0 or later\n     * @default false\n     */\n    queueMultiRenders?: boolean;\n\n    /**\n     * Dynamic CSS Url to be injected in the loaded application.\n     * You would also need to set `style-src` in the CSP settings.\n     * @version 1.6.0 or later\n     * @default ''\n     */\n    customCssUrl?: string;\n}\n\nexport type MessagePayload = { type: string; data: any };\nexport type MessageCallback = (\n    payload: MessagePayload,\n    responder?: (data: any) => void,\n) => void;\n\nexport type GenericCallbackFn = (...args: any[]) => any;\n\nexport type QueryParams = {\n    [key: string]: string;\n};\n\n/**\n * A map of the supported runtime filter operations\n */\n// eslint-disable-next-line no-shadow\nexport enum RuntimeFilterOp {\n    /**\n     * Equals\n     */\n    EQ = 'EQ',\n    /**\n     * Does not equal\n     */\n    NE = 'NE',\n    /**\n     * Less than\n     */\n    LT = 'LT',\n    /**\n     * Less than or equal to\n     */\n    LE = 'LE',\n    /**\n     * Greater than\n     */\n    GT = 'GT',\n    /**\n     * Greater than or equal to\n     */\n    GE = 'GE',\n    /**\n     * Contains\n     */\n    CONTAINS = 'CONTAINS',\n    /**\n     * Begins with\n     */\n    BEGINS_WITH = 'BEGINS_WITH',\n    /**\n     * Ends with\n     */\n    ENDS_WITH = 'ENDS_WITH',\n    /**\n     * Between, inclusive of higher value\n     */\n    BW_INC_MAX = 'BW_INC_MAX',\n    /**\n     * Between, inclusive of lower value\n     */\n    BW_INC_MIN = 'BW_INC_MIN',\n    /**\n     * Between, inclusive of both higher and lower value\n     */\n    BW_INC = 'BW_INC',\n    /**\n     * Between, non-inclusive\n     */\n    BW = 'BW',\n    /**\n     * Is included in this list of values\n     */\n    IN = 'IN',\n}\n\n/**\n * A filter that can be applied to ThoughtSpot answers, Liveboards, or\n * visualizations at runtime.\n */\nexport interface RuntimeFilter {\n    /**\n     * The name of the column to filter on (case-sensitive)\n     */\n    columnName: string;\n    /**\n     * The operator to apply\n     */\n    operator: RuntimeFilterOp;\n    /**\n     * The list of operands. Some operators like EQ, LE accept\n     * a single operand, whereas other operators like BW and IN accept multiple operands.\n     */\n    values: (number | boolean | string)[];\n}\n\n/**\n * Event types emitted by the embedded ThoughtSpot application.\n */\n// eslint-disable-next-line no-shadow\nexport enum EmbedEvent {\n    /**\n     * Rendering has initialized.\n     * @return timestamp - The timestamp when the event was generated.\n     */\n    Init = 'init',\n    /**\n     * Authentication has either succeeded or failed.\n     * @return isLoggedIn - A Boolean specifying whether authentication was successful.\n     */\n    AuthInit = 'authInit',\n    /**\n     * The embed object container has loaded.\n     * @return timestamp - The timestamp when the event was generated.\n     */\n    Load = 'load',\n    /**\n     * Data pertaining to answer or Liveboard is received\n     * @return data - The answer or Liveboard data\n     */\n    Data = 'data',\n    /**\n     * Search/answer/Liveboard filters have been applied/updated\n     * @hidden\n     */\n    FiltersChanged = 'filtersChanged',\n    /**\n     * Search query has been updated\n     */\n    QueryChanged = 'queryChanged',\n    /**\n     * A drill down operation has been performed.\n     * @return additionalFilters - Any additional filters applied\n     * @return drillDownColumns - The columns on which drill down was performed\n     * @return nonFilteredColumns - The columns that were not filtered\n     */\n    Drilldown = 'drillDown',\n    /**\n     * One or more data sources have been selected.\n     * @return dataSourceIds - the list of data sources\n     */\n    DataSourceSelected = 'dataSourceSelected',\n    /**\n     * One or more data columns have been selected.\n     * @return columnIds - the list of columns\n     * @version SDK: 1.10.0 | ThoughtSpot: 8.2.0.cl\n     */\n    AddRemoveColumns = 'addRemoveColumns',\n    /**\n     * A custom action has been triggered\n     * @return actionId - The id of the custom action\n     * @return data - The answer or Liveboard data\n     */\n    CustomAction = 'customAction',\n    /**\n     * A double click has been triggered on table/chart\n     * @return ContextMenuInputPoints - data point that is double clicked\n     * @version 1.5.0 or later\n     */\n    VizPointDoubleClick = 'vizPointDoubleClick',\n    /**\n     * An error has occurred.\n     * @return error - An error object or message\n     */\n    Error = 'Error',\n    /**\n     * The embedded object has sent an alert\n     * @return alert - An alert object\n     */\n    Alert = 'alert',\n    /**\n     * The ThoughtSpot auth session has expired.\n     */\n    AuthExpire = 'ThoughtspotAuthExpired',\n    /**\n     * The height of the embedded Liveboard or visualization has been computed.\n     * @return data - The height of the embedded Liveboard or visualization\n     * @hidden\n     */\n    EmbedHeight = 'EMBED_HEIGHT',\n    /**\n     * The center of visible iframe viewport is calculated.\n     * @return data - The center of the visible Iframe viewport.\n     * @hidden\n     */\n    EmbedIframeCenter = 'EmbedIframeCenter',\n    /**\n     * Detects the route change.\n     */\n    RouteChange = 'ROUTE_CHANGE',\n    /**\n     * The v1 event type for Data\n     * @hidden\n     */\n    V1Data = 'exportVizDataToParent',\n    /**\n     * Emitted when the embed does not have cookie access. This\n     * happens on Safari where third-party cookies are blocked by default.\n     *\n     * @version 1.1.0 or later\n     */\n    NoCookieAccess = 'noCookieAccess',\n    /**\n     * Emitted when SAML is complete\n     * @private\n     * @hidden\n     */\n    SAMLComplete = 'samlComplete',\n    /**\n     * Emitted when any modal is opened in the app\n     * @version 1.6.0 or later\n     */\n    DialogOpen = 'dialog-open',\n    /**\n     * Emitted when any modal is closed in the app\n     * @version 1.6.0 or later\n     */\n    DialogClose = 'dialog-close',\n    /**\n     * Emitted when a liveboard has completed rendering,\n     * this event can be used as a hook to trigger events on the\n     * rendered liveboard\n     * @version 1.9.1 or later\n     */\n    LiveboardRendered = 'PinboardRendered',\n}\n\n/**\n * Event types that can be triggered by the host application\n * to the embedded ThoughtSpot app\n *\n * To trigger an event use the corresponding\n * {@link LiveboardEmbed.trigger} or {@link AppEmbed.trigger} or {@link SearchEmbed.trigger} method.\n */\n// eslint-disable-next-line no-shadow\nexport enum HostEvent {\n    /**\n     * Trigger a search\n     * @param dataSourceIds - The list of data source GUIDs\n     * @param searchQuery - The search query\n     */\n    Search = 'search',\n    /**\n     * Trigger a drill on certain points by certain column\n     * @param points - an object containing selectedPoints/clickedPoints\n     *              eg. { selectedPoints: []}\n     * @param columnGuid - a string guid of the column to drill by. This is optional,\n     *                     if not provided it will auto drill by the configured column. \\\n     * @version 1.5.0 or later\n     */\n    DrillDown = 'triggerDrillDown',\n    /**\n     * Apply filters\n     * @hidden\n     */\n    Filter = 'filter',\n    /**\n     * Reload the answer or visualization\n     * @hidden\n     */\n    Reload = 'reload',\n    /**\n     * Set the visible visualizations on a Liveboard.\n     * @param - an array of ids of visualizations to show, the ids not passed\n     *          will be hidden.\n     * @version 1.6.0 or later\n     */\n    SetVisibleVizs = 'SetPinboardVisibleVizs',\n    /**\n     * Update the runtime filters. The runtime filters passed here are extended\n     * on to the existing runtime filters if they exist.\n     * @param - {@link RuntimeFilter}[] an array of {@link RuntimeFilter} Types.\n     * @version SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl\n     */\n    UpdateRuntimeFilters = 'UpdateRuntimeFilters',\n}\n\n/**\n * The different visual modes that the data sources panel within\n * search could appear in, i.e., hidden, collapsed, or expanded.\n */\n// eslint-disable-next-line no-shadow\nexport enum DataSourceVisualMode {\n    /**\n     * Data source panel is hidden.\n     */\n    Hidden = 'hide',\n    /**\n     * Data source panel is collapsed, but the user can manually expand it.\n     */\n    Collapsed = 'collapse',\n    /**\n     * Data source panel is expanded, but the user can manually collapse it.\n     */\n    Expanded = 'expand',\n}\n\n/**\n * The query params passed down to the embedded ThoughtSpot app\n * containing configuration and/or visual information.\n */\n// eslint-disable-next-line no-shadow\nexport enum Param {\n    DataSources = 'dataSources',\n    DataSourceMode = 'dataSourceMode',\n    ExpandAllDataSource = 'expandAllDataSource',\n    DisableActions = 'disableAction',\n    DisableActionReason = 'disableHint',\n    ForceTable = 'forceTable',\n    preventLiveboardFilterRemoval = 'preventPinboardFilterRemoval', // update-TSCB\n    SearchQuery = 'searchQuery',\n    HideActions = 'hideAction',\n    HideObjects = 'hideObjects',\n    HostAppUrl = 'hostAppUrl',\n    EnableVizTransformations = 'enableVizTransform',\n    EnableSearchAssist = 'enableSearchAssist',\n    HideResult = 'hideResult',\n    UseLastSelectedDataSource = 'useLastSelectedSources',\n    Tag = 'tag',\n    searchTokenString = 'searchTokenString',\n    executeSearch = 'executeSearch',\n    fullHeight = 'isFullHeightPinboard',\n    livedBoardEmbed = 'isLiveboardEmbed',\n    searchEmbed = 'isSearchEmbed',\n    Version = 'sdkVersion',\n    ViewPortHeight = 'viewPortHeight',\n    ViewPortWidth = 'viewPortWidth',\n    VisibleActions = 'visibleAction',\n    CustomCSSUrl = 'customCssUrl',\n    visibleVizs = 'pinboardVisibleVizs',\n    DisableLoginRedirect = 'disableLoginRedirect',\n    Locale = 'locale',\n}\n\n/**\n * The list of actions that can be performed on visual ThoughtSpot\n * entities, such as answers and Liveboards.\n */\n// eslint-disable-next-line no-shadow\nexport enum Action {\n    Save = 'save',\n    Update = 'update',\n    SaveUntitled = 'saveUntitled',\n    SaveAsView = 'saveAsView',\n    MakeACopy = 'makeACopy',\n    EditACopy = 'editACopy',\n    CopyLink = 'embedDocument',\n    ResetLayout = 'resetLayout',\n    Schedule = 'subscription',\n    SchedulesList = 'schedule-list',\n    Share = 'share',\n    AddFilter = 'addFilter',\n    ConfigureFilter = 'configureFilter',\n    AddFormula = 'addFormula',\n    SearchOnTop = 'searchOnTop',\n    SpotIQAnalyze = 'spotIQAnalyze',\n    ExplainInsight = 'explainInsight',\n    SpotIQFollow = 'spotIQFollow',\n    ShareViz = 'shareViz',\n    ReplaySearch = 'replaySearch',\n    ShowUnderlyingData = 'showUnderlyingData',\n    Download = 'download',\n    DownloadAsPdf = 'downloadAsPdf',\n    DownloadAsCsv = 'downloadAsCSV',\n    DownloadAsXlsx = 'downloadAsXLSX',\n    DownloadTrace = 'downloadTrace',\n    ExportTML = 'exportTSL',\n    ImportTML = 'importTSL',\n    UpdateTML = 'updateTSL',\n    EditTML = 'editTSL',\n    Present = 'present',\n    ToggleSize = 'toggleSize',\n    Edit = 'edit',\n    EditTitle = 'editTitle',\n    Remove = 'delete',\n    Ungroup = 'ungroup',\n    Describe = 'describe',\n    Relate = 'relate',\n    CustomizeHeadlines = 'customizeHeadlines',\n    /**\n     * @hidden\n     */\n    PinboardInfo = 'pinboardInfo',\n    LiveboardInfo = 'pinboardInfo',\n    SendAnswerFeedback = 'sendFeedback',\n    DownloadEmbraceQueries = 'downloadEmbraceQueries',\n    Pin = 'pin',\n    AnalysisInfo = 'analysisInfo',\n    Subscription = 'subscription',\n    Explore = 'explore',\n    DrillInclude = 'context-menu-item-include',\n    DrillExclude = 'context-menu-item-exclude',\n    CopyToClipboard = 'context-menu-item-copy-to-clipboard',\n    CopyAndEdit = 'context-menu-item-copy-and-edit',\n    DrillEdit = 'context-menu-item-edit',\n    EditMeasure = 'context-menu-item-edit-measure',\n    Separator = 'context-menu-item-separator',\n    DrillDown = 'DRILL',\n    RequestAccess = 'requestAccess',\n    QueryDetailsButtons = 'queryDetailsButtons',\n    /**\n     * @version SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl\n     */\n    Monitor = 'createMonitor',\n    /**\n     * @version SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl\n     */\n    AnswerDelete = 'onDeleteAnswer',\n    /**\n     * @version SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl\n     */\n    AnswerChartSwitcher = 'answerChartSwitcher',\n    /**\n     * @version SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl\n     */\n    AddToFavorites = 'addToFavorites',\n    /**\n     * @version SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl\n     */\n    EditDetails = 'editDetails',\n}\n\nexport interface SessionInterface {\n    sessionId: string;\n    genNo: number;\n    acSession: { sessionId: string; genNo: number };\n}\n\n// eslint-disable-next-line no-shadow\nexport enum OperationType {\n    GetChartWithData = 'GetChartWithData',\n    GetTableWithHeadlineData = 'GetTableWithHeadlineData',\n}\n\nexport interface AnswerServiceType {\n    getAnswer?: (offset: number, batchSize: number) => any;\n}\n"]},"metadata":{},"sourceType":"module"}