{"ast":null,"code":"/**\n * Copyright (c) 2022\n *\n * Full application embedding\n * https://developers.thoughtspot.com/docs/?pageid=full-embed\n *\n * @summary Full app embed\n * @module\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nimport { getFilterQuery, getQueryParamString } from '../utils';\nimport { Param } from '../types';\nimport { V1Embed } from './ts-embed';\n/**\n * Pages within the ThoughtSpot app that can be embedded.\n */\n// eslint-disable-next-line no-shadow\n\nexport var Page;\n\n(function (Page) {\n  /**\n   * Home page\n   */\n  Page[\"Home\"] = \"home\";\n  /**\n   * Search page\n   */\n\n  Page[\"Search\"] = \"search\";\n  /**\n   * Saved answers listing page\n   */\n\n  Page[\"Answers\"] = \"answers\";\n  /**\n   * Liveboards listing page\n   */\n\n  Page[\"Liveboards\"] = \"liveboards\";\n  /**\n   * @hidden\n   */\n\n  Page[\"Pinboards\"] = \"pinboards\";\n  /**\n   * Data management page\n   */\n\n  Page[\"Data\"] = \"data\";\n  /**\n   * SpotIQ listing page\n   * @version 1.9.8\n   */\n\n  Page[\"SpotIQ\"] = \"spotiq\";\n})(Page || (Page = {}));\n/**\n * Embeds full ThoughtSpot experience in a host application.\n * @Category App Embed\n */\n\n\nexport class AppEmbed extends V1Embed {\n  // eslint-disable-next-line no-useless-constructor\n  constructor(domSelector, viewConfig) {\n    super(domSelector, viewConfig);\n  }\n  /**\n   * Constructs a map of parameters to be passed on to the\n   * embedded Liveboard or visualization.\n   */\n\n\n  getEmbedParams() {\n    const params = this.getBaseQueryParams();\n    const {\n      tag,\n      hideObjects\n    } = this.viewConfig;\n\n    if (tag) {\n      params[Param.Tag] = tag;\n    }\n\n    if (hideObjects && hideObjects.length) {\n      params[Param.HideObjects] = JSON.stringify(hideObjects);\n    }\n\n    const queryParams = getQueryParamString(params, true);\n    return queryParams;\n  }\n  /**\n   * Constructs the URL of the ThoughtSpot app page to be rendered.\n   * @param pageId The ID of the page to be embedded.\n   */\n\n\n  getIFrameSrc(pageId, runtimeFilters) {\n    const filterQuery = getFilterQuery(runtimeFilters || []);\n    const queryParams = this.getEmbedParams();\n    const queryString = [filterQuery, queryParams].filter(Boolean).join('&');\n    const url = `${this.getV1EmbedBasePath(queryString, this.viewConfig.showPrimaryNavbar, this.viewConfig.disableProfileAndHelp, true)}/${pageId}`;\n    return url;\n  }\n  /**\n   * Gets the ThoughtSpot route of the page for a particular page ID.\n   * @param pageId The identifier for a page in the ThoughtSpot app.\n   */\n\n\n  getPageRoute(pageId) {\n    switch (pageId) {\n      case Page.Search:\n        return 'answer';\n\n      case Page.Answers:\n        return 'answers';\n\n      case Page.Liveboards:\n        return 'pinboards';\n\n      case Page.Pinboards:\n        return 'pinboards';\n\n      case Page.Data:\n        return 'data/tables';\n\n      case Page.SpotIQ:\n        return 'insights/results';\n\n      case Page.Home:\n      default:\n        return 'home';\n    }\n  }\n  /**\n   * Formats the path provided by the user.\n   * @param path The URL path.\n   * @returns The URL path that the embedded app understands.\n   */\n\n\n  formatPath(path) {\n    if (!path) {\n      return null;\n    } // remove leading slash\n\n\n    if (path.indexOf('/') === 0) {\n      return path.substring(1);\n    }\n\n    return path;\n  }\n  /**\n   * Navigate to particular page for app embed. eg:answers/pinboards/home\n   * This is used for embedding answers, pinboards, visualizations and full application only.\n   * @param path The string, set to iframe src and navigate to new page\n   * eg: appEmbed.navigateToPage('pinboards')\n   */\n\n\n  navigateToPage(path) {\n    if (this.iFrame) {\n      const iframeSrc = this.iFrame.src;\n      const embedPath = '#/embed';\n      const currentPath = iframeSrc.includes(embedPath) ? embedPath : '#';\n      this.iFrame.src = `${iframeSrc.split(currentPath)[0]}${currentPath}/${path.replace(/^\\/?#?\\//, '')}`;\n    } else {\n      console.log('Please call render before invoking this method');\n    }\n  }\n  /**\n   * Renders the embedded application pages in the ThoughtSpot app.\n   * @param renderOptions An object containing the page ID\n   * to be embedded.\n   */\n\n\n  render() {\n    super.render();\n    const {\n      pageId,\n      runtimeFilters,\n      path\n    } = this.viewConfig;\n    const pageRoute = this.formatPath(path) || this.getPageRoute(pageId);\n    const src = this.getIFrameSrc(pageRoute, runtimeFilters);\n    this.renderV1Embed(src);\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["getFilterQuery","getQueryParamString","Param","V1Embed","Page","AppEmbed","constructor","domSelector","viewConfig","getEmbedParams","params","getBaseQueryParams","tag","hideObjects","Tag","length","HideObjects","JSON","stringify","queryParams","getIFrameSrc","pageId","runtimeFilters","filterQuery","queryString","filter","Boolean","join","url","getV1EmbedBasePath","showPrimaryNavbar","disableProfileAndHelp","getPageRoute","Search","Answers","Liveboards","Pinboards","Data","SpotIQ","Home","formatPath","path","indexOf","substring","navigateToPage","iFrame","iframeSrc","src","embedPath","currentPath","includes","split","replace","console","log","render","pageRoute","renderV1Embed"],"sources":["/Users/nathan.schroeder/Documents/dev/ts-integration-demo/node_modules/@thoughtspot/visual-embed-sdk/src/embed/app.ts"],"sourcesContent":["/**\n * Copyright (c) 2022\n *\n * Full application embedding\n * https://developers.thoughtspot.com/docs/?pageid=full-embed\n *\n * @summary Full app embed\n * @module\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\n\nimport { getFilterQuery, getQueryParamString } from '../utils';\nimport { Param, RuntimeFilter, DOMSelector } from '../types';\nimport { V1Embed, ViewConfig } from './ts-embed';\n\n/**\n * Pages within the ThoughtSpot app that can be embedded.\n */\n// eslint-disable-next-line no-shadow\nexport enum Page {\n    /**\n     * Home page\n     */\n    Home = 'home',\n    /**\n     * Search page\n     */\n    Search = 'search',\n    /**\n     * Saved answers listing page\n     */\n    Answers = 'answers',\n    /**\n     * Liveboards listing page\n     */\n    Liveboards = 'liveboards',\n    /**\n     * @hidden\n     */\n    Pinboards = 'pinboards',\n    /**\n     * Data management page\n     */\n    Data = 'data',\n    /**\n     * SpotIQ listing page\n     * @version 1.9.8\n     */\n    SpotIQ = 'spotiq',\n}\n\n/**\n * The view configuration for full app embedding.\n * @Category App Embed\n */\nexport interface AppViewConfig extends ViewConfig {\n    /**\n     * If true, the main navigation bar within the ThoughtSpot app\n     * is displayed. By default, the navigation bar is hidden.\n     */\n    showPrimaryNavbar?: boolean;\n    /**\n     * If true, help and profile buttons will hide on NavBar. By default,\n     * they are shown.\n     */\n    disableProfileAndHelp?: boolean;\n    /**\n     * A URL path within the app that is to be embedded.\n     * If both path and pageId attributes are defined, the path definition\n     * takes precedence.\n     */\n    path?: string;\n    /**\n     * The application page to set as the start page\n     * in the embedded view.\n     */\n    pageId?: Page;\n    /**\n     * This puts a filter tag on the application. All metadata lists in the application, such as\n     * Liveboards and answers, would be filtered by this tag.\n     */\n    tag?: string;\n    /**\n     * The array of GUIDs to be hidden\n     */\n    hideObjects?: string[];\n}\n\n/**\n * Embeds full ThoughtSpot experience in a host application.\n * @Category App Embed\n */\nexport class AppEmbed extends V1Embed {\n    protected viewConfig: AppViewConfig;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(domSelector: DOMSelector, viewConfig: AppViewConfig) {\n        super(domSelector, viewConfig);\n    }\n\n    /**\n     * Constructs a map of parameters to be passed on to the\n     * embedded Liveboard or visualization.\n     */\n    private getEmbedParams() {\n        const params = this.getBaseQueryParams();\n        const { tag, hideObjects } = this.viewConfig;\n\n        if (tag) {\n            params[Param.Tag] = tag;\n        }\n        if (hideObjects && hideObjects.length) {\n            params[Param.HideObjects] = JSON.stringify(hideObjects);\n        }\n\n        const queryParams = getQueryParamString(params, true);\n\n        return queryParams;\n    }\n\n    /**\n     * Constructs the URL of the ThoughtSpot app page to be rendered.\n     * @param pageId The ID of the page to be embedded.\n     */\n    private getIFrameSrc(pageId: string, runtimeFilters: RuntimeFilter[]) {\n        const filterQuery = getFilterQuery(runtimeFilters || []);\n        const queryParams = this.getEmbedParams();\n        const queryString = [filterQuery, queryParams]\n            .filter(Boolean)\n            .join('&');\n        const url = `${this.getV1EmbedBasePath(\n            queryString,\n            this.viewConfig.showPrimaryNavbar,\n            this.viewConfig.disableProfileAndHelp,\n            true,\n        )}/${pageId}`;\n\n        return url;\n    }\n\n    /**\n     * Gets the ThoughtSpot route of the page for a particular page ID.\n     * @param pageId The identifier for a page in the ThoughtSpot app.\n     */\n    private getPageRoute(pageId: Page) {\n        switch (pageId) {\n            case Page.Search:\n                return 'answer';\n            case Page.Answers:\n                return 'answers';\n            case Page.Liveboards:\n                return 'pinboards';\n            case Page.Pinboards:\n                return 'pinboards';\n            case Page.Data:\n                return 'data/tables';\n            case Page.SpotIQ:\n                return 'insights/results';\n            case Page.Home:\n            default:\n                return 'home';\n        }\n    }\n\n    /**\n     * Formats the path provided by the user.\n     * @param path The URL path.\n     * @returns The URL path that the embedded app understands.\n     */\n    private formatPath(path: string) {\n        if (!path) {\n            return null;\n        }\n\n        // remove leading slash\n        if (path.indexOf('/') === 0) {\n            return path.substring(1);\n        }\n\n        return path;\n    }\n\n    /**\n     * Navigate to particular page for app embed. eg:answers/pinboards/home\n     * This is used for embedding answers, pinboards, visualizations and full application only.\n     * @param path The string, set to iframe src and navigate to new page\n     * eg: appEmbed.navigateToPage('pinboards')\n     */\n    public navigateToPage(path: string): void {\n        if (this.iFrame) {\n            const iframeSrc = this.iFrame.src;\n            const embedPath = '#/embed';\n            const currentPath = iframeSrc.includes(embedPath) ? embedPath : '#';\n            this.iFrame.src = `${\n                iframeSrc.split(currentPath)[0]\n            }${currentPath}/${path.replace(/^\\/?#?\\//, '')}`;\n        } else {\n            console.log('Please call render before invoking this method');\n        }\n    }\n\n    /**\n     * Renders the embedded application pages in the ThoughtSpot app.\n     * @param renderOptions An object containing the page ID\n     * to be embedded.\n     */\n    public render(): AppEmbed {\n        super.render();\n\n        const { pageId, runtimeFilters, path } = this.viewConfig;\n        const pageRoute = this.formatPath(path) || this.getPageRoute(pageId);\n        const src = this.getIFrameSrc(pageRoute, runtimeFilters);\n        this.renderV1Embed(src);\n\n        return this;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}