{"ast":null,"code":"/**\n * Copyright (c) 2022\n *\n * Embed a ThoughtSpot Liveboard or visualization\n * https://developers.thoughtspot.com/docs/?pageid=embed-pinboard\n * https://developers.thoughtspot.com/docs/?pageid=embed-a-viz\n *\n * @summary Liveboard & visualization embed\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nimport { ERROR_MESSAGE } from '../errors';\nimport { EmbedEvent, Param } from '../types';\nimport { getFilterQuery, getQueryParamString } from '../utils';\nimport { V1Embed } from './ts-embed';\n/**\n * Embed a ThoughtSpot Liveboard or visualization\n * @Category Liveboards and Charts\n */\n\nexport class LiveboardEmbed extends V1Embed {\n  // eslint-disable-next-line no-useless-constructor\n  constructor(domSelector, viewConfig) {\n    super(domSelector, viewConfig);\n    this.defaultHeight = 500;\n    /**\n     * Set the iframe height as per the computed height received\n     * from the ThoughtSpot app.\n     * @param data The event payload\n     */\n\n    this.updateIFrameHeight = data => {\n      this.setIFrameHeight(Math.max(data.data, this.defaultHeight));\n    };\n\n    this.embedIframeCenter = (data, responder) => {\n      const obj = this.getIframeCenter();\n      responder({\n        type: EmbedEvent.EmbedIframeCenter,\n        data: obj\n      });\n    };\n\n    this.setIframeHeightForNonEmbedLiveboard = data => {\n      if (!data.data.currentPath.startsWith('/embed/viz/')) {\n        this.setIFrameHeight(this.defaultHeight);\n      }\n    };\n  }\n  /**\n   * Construct a map of params to be passed on to the\n   * embedded Liveboard or visualization.\n   */\n\n\n  getEmbedParams() {\n    const params = this.getBaseQueryParams();\n    const {\n      enableVizTransformations,\n      fullHeight,\n      defaultHeight,\n      visibleVizs\n    } = this.viewConfig;\n    const preventLiveboardFilterRemoval = this.viewConfig.preventLiveboardFilterRemoval || this.viewConfig.preventPinboardFilterRemoval;\n\n    if (fullHeight === true) {\n      params[Param.fullHeight] = true;\n    }\n\n    if (defaultHeight) {\n      this.defaultHeight = defaultHeight;\n    }\n\n    if (enableVizTransformations !== undefined) {\n      params[Param.EnableVizTransformations] = enableVizTransformations.toString();\n    }\n\n    if (preventLiveboardFilterRemoval) {\n      params[Param.preventLiveboardFilterRemoval] = true;\n    }\n\n    if (visibleVizs) {\n      params[Param.visibleVizs] = visibleVizs;\n    }\n\n    params[Param.livedBoardEmbed] = true;\n    const queryParams = getQueryParamString(params, true);\n    return queryParams;\n  }\n  /**\n   * Construct the URL of the embedded ThoughtSpot Liveboard or visualization\n   * to be loaded within the iframe.\n   * @param liveboardId The GUID of the Liveboard.\n   * @param vizId The optional GUID of a visualization within the Liveboard.\n   * @param runtimeFilters A list of runtime filters to be applied to\n   * the Liveboard or visualization on load.\n   */\n\n\n  getIFrameSrc(liveboardId, vizId, runtimeFilters) {\n    const filterQuery = getFilterQuery(runtimeFilters || []);\n    const queryParams = this.getEmbedParams();\n    const queryString = [filterQuery, queryParams].filter(Boolean).join('&');\n    let url = `${this.getV1EmbedBasePath(queryString, true, false, false)}/viz/${liveboardId}`;\n\n    if (vizId) {\n      url = `${url}/${vizId}`;\n    }\n\n    return url;\n  }\n  /**\n   * Render an embedded ThoughtSpot Liveboard or visualization\n   * @param renderOptions An object specifying the Liveboard ID,\n   * visualization ID and the runtime filters.\n   */\n\n\n  render() {\n    var _a;\n\n    const {\n      vizId,\n      runtimeFilters\n    } = this.viewConfig;\n    const liveboardId = (_a = this.viewConfig.liveboardId) !== null && _a !== void 0 ? _a : this.viewConfig.pinboardId;\n\n    if (!liveboardId) {\n      this.handleError(ERROR_MESSAGE.LIVEBOARD_VIZ_ID_VALIDATION);\n    }\n\n    if (this.viewConfig.fullHeight === true) {\n      this.on(EmbedEvent.RouteChange, this.setIframeHeightForNonEmbedLiveboard);\n      this.on(EmbedEvent.EmbedHeight, this.updateIFrameHeight);\n      this.on(EmbedEvent.EmbedIframeCenter, this.embedIframeCenter);\n    }\n\n    super.render();\n    const src = this.getIFrameSrc(liveboardId, vizId, runtimeFilters);\n    this.renderV1Embed(src);\n    return this;\n  }\n\n}\n/**\n * @hidden\n */\n\nexport class PinboardEmbed extends LiveboardEmbed {}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;AAWA,SAASA,aAAT,QAA8B,WAA9B;AACA,SACIC,UADJ,EAGIC,KAHJ,QAOO,UAPP;AAQA,SAASC,cAAT,EAAyBC,mBAAzB,QAAoD,UAApD;AACA,SAASC,OAAT,QAAoC,YAApC;AAyDA;;;;;AAIA,OAAM,MAAOC,cAAP,SAA8BD,OAA9B,CAAqC;AAKvC;AACAE,cAAYC,WAAZ,EAAsCC,UAAtC,EAAqE;AACjE,UAAMD,WAAN,EAAmBC,UAAnB;AAJI,yBAAgB,GAAhB;AA8ER;;;;;;AAKQ,8BAAsBC,IAAD,IAAyB;AAClD,WAAKC,eAAL,CAAqBC,IAAI,CAACC,GAAL,CAASH,IAAI,CAACA,IAAd,EAAoB,KAAKI,aAAzB,CAArB;AACH,KAFO;;AAIA,6BAAoB,CAACJ,IAAD,EAAuBK,SAAvB,KAAyC;AACjE,YAAMC,GAAG,GAAG,KAAKC,eAAL,EAAZ;AACAF,eAAS,CAAC;AAAEG,YAAI,EAAEjB,UAAU,CAACkB,iBAAnB;AAAsCT,YAAI,EAAEM;AAA5C,OAAD,CAAT;AACH,KAHO;;AAKA,+CAAuCN,IAAD,IAAyB;AACnE,UAAI,CAACA,IAAI,CAACA,IAAL,CAAUU,WAAV,CAAsBC,UAAtB,CAAiC,aAAjC,CAAL,EAAsD;AAClD,aAAKV,eAAL,CAAqB,KAAKG,aAA1B;AACH;AACJ,KAJO;AAvFP;AAED;;;;;;AAIQQ,gBAAc;AAClB,UAAMC,MAAM,GAAG,KAAKC,kBAAL,EAAf;AACA,UAAM;AACFC,8BADE;AAEFC,gBAFE;AAGFZ,mBAHE;AAIFa;AAJE,QAKF,KAAKlB,UALT;AAOA,UAAMmB,6BAA6B,GAC/B,KAAKnB,UAAL,CAAgBmB,6BAAhB,IACA,KAAKnB,UAAL,CAAgBoB,4BAFpB;;AAIA,QAAIH,UAAU,KAAK,IAAnB,EAAyB;AACrBH,YAAM,CAACrB,KAAK,CAACwB,UAAP,CAAN,GAA2B,IAA3B;AACH;;AACD,QAAIZ,aAAJ,EAAmB;AACf,WAAKA,aAAL,GAAqBA,aAArB;AACH;;AACD,QAAIW,wBAAwB,KAAKK,SAAjC,EAA4C;AACxCP,YAAM,CACFrB,KAAK,CAAC6B,wBADJ,CAAN,GAEIN,wBAAwB,CAACO,QAAzB,EAFJ;AAGH;;AACD,QAAIJ,6BAAJ,EAAmC;AAC/BL,YAAM,CAACrB,KAAK,CAAC0B,6BAAP,CAAN,GAA8C,IAA9C;AACH;;AACD,QAAID,WAAJ,EAAiB;AACbJ,YAAM,CAACrB,KAAK,CAACyB,WAAP,CAAN,GAA4BA,WAA5B;AACH;;AACDJ,UAAM,CAACrB,KAAK,CAAC+B,eAAP,CAAN,GAAgC,IAAhC;AACA,UAAMC,WAAW,GAAG9B,mBAAmB,CAACmB,MAAD,EAAS,IAAT,CAAvC;AAEA,WAAOW,WAAP;AACH;AAED;;;;;;;;;;AAQQC,cAAY,CAChBC,WADgB,EAEhBC,KAFgB,EAGhBC,cAHgB,EAGgB;AAEhC,UAAMC,WAAW,GAAGpC,cAAc,CAACmC,cAAc,IAAI,EAAnB,CAAlC;AACA,UAAMJ,WAAW,GAAG,KAAKZ,cAAL,EAApB;AACA,UAAMkB,WAAW,GAAG,CAACD,WAAD,EAAcL,WAAd,EACfO,MADe,CACRC,OADQ,EAEfC,IAFe,CAEV,GAFU,CAApB;AAGA,QAAIC,GAAG,GAAG,GAAG,KAAKC,kBAAL,CACTL,WADS,EAET,IAFS,EAGT,KAHS,EAIT,KAJS,CAKZ,QAAQJ,WAAW,EALpB;;AAMA,QAAIC,KAAJ,EAAW;AACPO,SAAG,GAAG,GAAGA,GAAG,IAAIP,KAAK,EAArB;AACH;;AAED,WAAOO,GAAP;AACH;AAsBD;;;;;;;AAKOE,QAAM;;;AACT,UAAM;AAAET,WAAF;AAASC;AAAT,QAA4B,KAAK7B,UAAvC;AACA,UAAM2B,WAAW,GACb,WAAK3B,UAAL,CAAgB2B,WAAhB,MAA2B,IAA3B,IAA2BW,aAA3B,GAA2BA,EAA3B,GAA+B,KAAKtC,UAAL,CAAgBuC,UADnD;;AAGA,QAAI,CAACZ,WAAL,EAAkB;AACd,WAAKa,WAAL,CAAiBjD,aAAa,CAACkD,2BAA/B;AACH;;AAED,QAAI,KAAKzC,UAAL,CAAgBiB,UAAhB,KAA+B,IAAnC,EAAyC;AACrC,WAAKyB,EAAL,CACIlD,UAAU,CAACmD,WADf,EAEI,KAAKC,mCAFT;AAIA,WAAKF,EAAL,CAAQlD,UAAU,CAACqD,WAAnB,EAAgC,KAAKC,kBAArC;AACA,WAAKJ,EAAL,CAAQlD,UAAU,CAACkB,iBAAnB,EAAsC,KAAKqC,iBAA3C;AACH;;AAED,UAAMV,MAAN;AAEA,UAAMW,GAAG,GAAG,KAAKtB,YAAL,CAAkBC,WAAlB,EAA+BC,KAA/B,EAAsCC,cAAtC,CAAZ;AACA,SAAKoB,aAAL,CAAmBD,GAAnB;AAEA,WAAO,IAAP;AACH;;AAlIsC;AAqI3C;;;;AAGA,OAAM,MAAOE,aAAP,SAA6BrD,cAA7B,CAA2C","names":["ERROR_MESSAGE","EmbedEvent","Param","getFilterQuery","getQueryParamString","V1Embed","LiveboardEmbed","constructor","domSelector","viewConfig","data","setIFrameHeight","Math","max","defaultHeight","responder","obj","getIframeCenter","type","EmbedIframeCenter","currentPath","startsWith","getEmbedParams","params","getBaseQueryParams","enableVizTransformations","fullHeight","visibleVizs","preventLiveboardFilterRemoval","preventPinboardFilterRemoval","undefined","EnableVizTransformations","toString","livedBoardEmbed","queryParams","getIFrameSrc","liveboardId","vizId","runtimeFilters","filterQuery","queryString","filter","Boolean","join","url","getV1EmbedBasePath","render","_a","pinboardId","handleError","LIVEBOARD_VIZ_ID_VALIDATION","on","RouteChange","setIframeHeightForNonEmbedLiveboard","EmbedHeight","updateIFrameHeight","embedIframeCenter","src","renderV1Embed","PinboardEmbed"],"sources":["/Users/nathan.schroeder/Documents/dev/TSIntegrationDemo/ts-integration-demo/node_modules/@thoughtspot/visual-embed-sdk/src/embed/liveboard.ts"],"sourcesContent":["/**\n * Copyright (c) 2022\n *\n * Embed a ThoughtSpot Liveboard or visualization\n * https://developers.thoughtspot.com/docs/?pageid=embed-pinboard\n * https://developers.thoughtspot.com/docs/?pageid=embed-a-viz\n *\n * @summary Liveboard & visualization embed\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\n\nimport { ERROR_MESSAGE } from '../errors';\nimport {\n    EmbedEvent,\n    MessagePayload,\n    Param,\n    RuntimeFilter,\n    DOMSelector,\n    HostEvent,\n} from '../types';\nimport { getFilterQuery, getQueryParamString } from '../utils';\nimport { V1Embed, ViewConfig } from './ts-embed';\n\n/**\n * The configuration for the embedded Liveboard or visualization page view.\n * @Category Liveboards and Charts\n */\nexport interface LiveboardViewConfig extends ViewConfig {\n    /**\n     * If set to true, the embedded object container dynamically resizes\n     * according to the height of the Liveboard.\n     */\n    fullHeight?: boolean;\n    /**\n     * This is the minimum height(in pixels) for a full height Liveboard.\n     * Setting this height helps resolves issues with empty Liveboards and\n     * other screens navigable from a Liveboard.\n     * @version 1.5.0 or later\n     * @default 500\n     */\n    defaultHeight?: number;\n    /**\n     * If set to true, the context menu in visualizations will be enabled.\n     */\n    enableVizTransformations?: boolean;\n    /**\n     * The Liveboard to display in the embedded view.\n     * Use either of liveboardId or pinboardId to reference the Liveboard to embed.\n     */\n    liveboardId?: string;\n    /**\n     * To support backward compatibilty\n     * @hidden\n     */\n    pinboardId?: string;\n    /**\n     * The visualization within the Liveboard to display.\n     */\n    vizId?: string;\n    /**\n     * If set to true, all filter chips from a\n     * Liveboard page will be read-only (no X buttons)\n     */\n    preventLiveboardFilterRemoval?: boolean;\n    /**\n     * Array of viz ids which should be visible when the liveboard\n     * first renders. This can be changed by triggering the \"SetVisibleVizs\"\n     * event.\n     * @version 1.9.1 or later\n     */\n    visibleVizs?: string[];\n    /**\n     * To support backward compatibilty\n     * @hidden\n     */\n    preventPinboardFilterRemoval?: boolean;\n}\n\n/**\n * Embed a ThoughtSpot Liveboard or visualization\n * @Category Liveboards and Charts\n */\nexport class LiveboardEmbed extends V1Embed {\n    protected viewConfig: LiveboardViewConfig;\n\n    private defaultHeight = 500;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(domSelector: DOMSelector, viewConfig: LiveboardViewConfig) {\n        super(domSelector, viewConfig);\n    }\n\n    /**\n     * Construct a map of params to be passed on to the\n     * embedded Liveboard or visualization.\n     */\n    private getEmbedParams() {\n        const params = this.getBaseQueryParams();\n        const {\n            enableVizTransformations,\n            fullHeight,\n            defaultHeight,\n            visibleVizs,\n        } = this.viewConfig;\n\n        const preventLiveboardFilterRemoval =\n            this.viewConfig.preventLiveboardFilterRemoval ||\n            this.viewConfig.preventPinboardFilterRemoval;\n\n        if (fullHeight === true) {\n            params[Param.fullHeight] = true;\n        }\n        if (defaultHeight) {\n            this.defaultHeight = defaultHeight;\n        }\n        if (enableVizTransformations !== undefined) {\n            params[\n                Param.EnableVizTransformations\n            ] = enableVizTransformations.toString();\n        }\n        if (preventLiveboardFilterRemoval) {\n            params[Param.preventLiveboardFilterRemoval] = true;\n        }\n        if (visibleVizs) {\n            params[Param.visibleVizs] = visibleVizs;\n        }\n        params[Param.livedBoardEmbed] = true;\n        const queryParams = getQueryParamString(params, true);\n\n        return queryParams;\n    }\n\n    /**\n     * Construct the URL of the embedded ThoughtSpot Liveboard or visualization\n     * to be loaded within the iframe.\n     * @param liveboardId The GUID of the Liveboard.\n     * @param vizId The optional GUID of a visualization within the Liveboard.\n     * @param runtimeFilters A list of runtime filters to be applied to\n     * the Liveboard or visualization on load.\n     */\n    private getIFrameSrc(\n        liveboardId: string,\n        vizId?: string,\n        runtimeFilters?: RuntimeFilter[],\n    ) {\n        const filterQuery = getFilterQuery(runtimeFilters || []);\n        const queryParams = this.getEmbedParams();\n        const queryString = [filterQuery, queryParams]\n            .filter(Boolean)\n            .join('&');\n        let url = `${this.getV1EmbedBasePath(\n            queryString,\n            true,\n            false,\n            false,\n        )}/viz/${liveboardId}`;\n        if (vizId) {\n            url = `${url}/${vizId}`;\n        }\n\n        return url;\n    }\n\n    /**\n     * Set the iframe height as per the computed height received\n     * from the ThoughtSpot app.\n     * @param data The event payload\n     */\n    private updateIFrameHeight = (data: MessagePayload) => {\n        this.setIFrameHeight(Math.max(data.data, this.defaultHeight));\n    };\n\n    private embedIframeCenter = (data: MessagePayload, responder: any) => {\n        const obj = this.getIframeCenter();\n        responder({ type: EmbedEvent.EmbedIframeCenter, data: obj });\n    };\n\n    private setIframeHeightForNonEmbedLiveboard = (data: MessagePayload) => {\n        if (!data.data.currentPath.startsWith('/embed/viz/')) {\n            this.setIFrameHeight(this.defaultHeight);\n        }\n    };\n\n    /**\n     * Render an embedded ThoughtSpot Liveboard or visualization\n     * @param renderOptions An object specifying the Liveboard ID,\n     * visualization ID and the runtime filters.\n     */\n    public render(): LiveboardEmbed {\n        const { vizId, runtimeFilters } = this.viewConfig;\n        const liveboardId =\n            this.viewConfig.liveboardId ?? this.viewConfig.pinboardId;\n\n        if (!liveboardId) {\n            this.handleError(ERROR_MESSAGE.LIVEBOARD_VIZ_ID_VALIDATION);\n        }\n\n        if (this.viewConfig.fullHeight === true) {\n            this.on(\n                EmbedEvent.RouteChange,\n                this.setIframeHeightForNonEmbedLiveboard,\n            );\n            this.on(EmbedEvent.EmbedHeight, this.updateIFrameHeight);\n            this.on(EmbedEvent.EmbedIframeCenter, this.embedIframeCenter);\n        }\n\n        super.render();\n\n        const src = this.getIFrameSrc(liveboardId, vizId, runtimeFilters);\n        this.renderV1Embed(src);\n\n        return this;\n    }\n}\n\n/**\n * @hidden\n */\nexport class PinboardEmbed extends LiveboardEmbed {}\n"]},"metadata":{},"sourceType":"module"}