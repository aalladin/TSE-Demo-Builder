{"ast":null,"code":"import React from 'react';\nimport { SearchEmbed as _SearchEmbed } from '../embed/search';\nimport { AppEmbed as _AppEmbed } from '../embed/app';\nimport { LiveboardEmbed as _LiveboardEmbed } from '../embed/liveboard';\nimport { getViewPropsAndListeners } from './util';\n\nconst componentFactory = EmbedConstructor => React.forwardRef((props, forwardedRef) => {\n  const ref = React.useRef(null);\n  const {\n    className,\n    ...embedProps\n  } = props;\n  const {\n    viewConfig,\n    listeners\n  } = getViewPropsAndListeners(embedProps);\n  React.useEffect(() => {\n    const tsEmbed = new EmbedConstructor(ref.current, { ...viewConfig\n    });\n    Object.keys(listeners).forEach(eventName => {\n      tsEmbed.on(eventName, listeners[eventName]);\n    });\n    tsEmbed.render();\n\n    if (forwardedRef) {\n      // eslint-disable-next-line no-param-reassign\n      forwardedRef.current = tsEmbed;\n    }\n  }, [embedProps]);\n  return React.createElement(\"div\", {\n    \"data-testid\": \"tsEmbed\",\n    ref: ref,\n    className: className\n  });\n});\n\nexport const SearchEmbed = componentFactory(_SearchEmbed);\nexport const AppEmbed = componentFactory(_AppEmbed);\nexport const LiveboardEmbed = componentFactory(_LiveboardEmbed);\nexport const PinboardEmbed = componentFactory(_LiveboardEmbed);\nexport const useEmbedRef = () => {\n  return React.useRef(null);\n};","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAW,IAAIC,YAAxB,QAA8D,iBAA9D;AACA,SAASC,QAAQ,IAAIC,SAArB,QAAqD,cAArD;AACA,SACIC,cAAc,IAAIC,eADtB,QAGO,oBAHP;AAOA,SAAqBC,wBAArB,QAAqD,QAArD;;AAEA,MAAMC,gBAAgB,GAKlBC,gBALqB,IAOrBT,KAAK,CAACU,UAAN,CACI,CAACC,KAAD,EAAWC,YAAX,KAA4D;AACxD,QAAMC,GAAG,GAAGb,KAAK,CAACc,MAAN,CAA6B,IAA7B,CAAZ;AACA,QAAM;AAAEC,aAAF;AAAa,OAAGC;AAAhB,MAA+BL,KAArC;AACA,QAAM;AAAEM,cAAF;AAAcC;AAAd,MAA4BX,wBAAwB,CAGxDS,UAHwD,CAA1D;AAIAhB,OAAK,CAACmB,SAAN,CAAgB,MAAK;AACjB,UAAMC,OAAO,GAAG,IAAIX,gBAAJ,CAAqBI,GAAI,CAACQ,OAA1B,EAAmC,EAC/C,GAAGJ;AAD4C,KAAnC,CAAhB;AAGAK,UAAM,CAACC,IAAP,CAAYL,SAAZ,EAAuBM,OAAvB,CAAgCC,SAAD,IAAc;AACzCL,aAAO,CAACM,EAAR,CACID,SADJ,EAEIP,SAAS,CAACO,SAAD,CAFb;AAIH,KALD;AAMAL,WAAO,CAACO,MAAR;;AACA,QAAIf,YAAJ,EAAkB;AACd;AACAA,kBAAY,CAACS,OAAb,GAAuBD,OAAvB;AACH;AACJ,GAfD,EAeG,CAACJ,UAAD,CAfH;AAiBA,SACIhB;AAAA,mBACgB,SADhB;AAEIa,OAAG,EAAEA,GAFT;AAGIE,aAAS,EAAEA;AAHf,IADJ;AAOH,CAhCL,CAPJ;;AA4CA,OAAO,MAAMd,WAAW,GAAGO,gBAAgB,CAIzCN,YAJyC,CAApC;AAQP,OAAO,MAAMC,QAAQ,GAAGK,gBAAgB,CAItCJ,SAJsC,CAAjC;AAQP,OAAO,MAAMC,cAAc,GAAGG,gBAAgB,CAI5CF,eAJ4C,CAAvC;AAMP,OAAO,MAAMsB,aAAa,GAAGpB,gBAAgB,CAI3CF,eAJ2C,CAAtC;AAMP,OAAO,MAAMuB,WAAW,GAAG,MAAsC;AAC7D,SAAO7B,KAAK,CAACc,MAAN,CAAsB,IAAtB,CAAP;AACH,CAFM","names":["React","SearchEmbed","_SearchEmbed","AppEmbed","_AppEmbed","LiveboardEmbed","_LiveboardEmbed","getViewPropsAndListeners","componentFactory","EmbedConstructor","forwardRef","props","forwardedRef","ref","useRef","className","embedProps","viewConfig","listeners","useEffect","tsEmbed","current","Object","keys","forEach","eventName","on","render","PinboardEmbed","useEmbedRef"],"sources":["/Users/nathan.schroeder/Documents/dev/ts-integration-demo/node_modules/@thoughtspot/visual-embed-sdk/src/react/index.tsx"],"sourcesContent":["import React from 'react';\nimport { SearchEmbed as _SearchEmbed, SearchViewConfig } from '../embed/search';\nimport { AppEmbed as _AppEmbed, AppViewConfig } from '../embed/app';\nimport {\n    LiveboardEmbed as _LiveboardEmbed,\n    LiveboardViewConfig,\n} from '../embed/liveboard';\nimport { TsEmbed, ViewConfig } from '../embed/ts-embed';\n\nimport { EmbedEvent } from '../types';\nimport { EmbedProps, getViewPropsAndListeners } from './util';\n\nconst componentFactory = <\n    T extends typeof TsEmbed,\n    U extends EmbedProps,\n    V extends ViewConfig\n>(\n    EmbedConstructor: T,\n) =>\n    React.forwardRef<TsEmbed, U>(\n        (props: U, forwardedRef: React.MutableRefObject<TsEmbed>) => {\n            const ref = React.useRef<HTMLDivElement>(null);\n            const { className, ...embedProps } = props;\n            const { viewConfig, listeners } = getViewPropsAndListeners<\n                Omit<U, 'className'>,\n                V\n            >(embedProps);\n            React.useEffect(() => {\n                const tsEmbed = new EmbedConstructor(ref!.current, {\n                    ...viewConfig,\n                });\n                Object.keys(listeners).forEach((eventName) => {\n                    tsEmbed.on(\n                        eventName as EmbedEvent,\n                        listeners[eventName as EmbedEvent],\n                    );\n                });\n                tsEmbed.render();\n                if (forwardedRef) {\n                    // eslint-disable-next-line no-param-reassign\n                    forwardedRef.current = tsEmbed;\n                }\n            }, [embedProps]);\n\n            return (\n                <div\n                    data-testid=\"tsEmbed\"\n                    ref={ref}\n                    className={className}\n                ></div>\n            );\n        },\n    );\n\ninterface SearchProps extends EmbedProps, SearchViewConfig {}\n\nexport const SearchEmbed = componentFactory<\n    typeof _SearchEmbed,\n    SearchProps,\n    SearchViewConfig\n>(_SearchEmbed);\n\ninterface AppProps extends EmbedProps, AppViewConfig {}\n\nexport const AppEmbed = componentFactory<\n    typeof _AppEmbed,\n    AppProps,\n    AppViewConfig\n>(_AppEmbed);\n\ninterface LiveboardProps extends EmbedProps, LiveboardViewConfig {}\n\nexport const LiveboardEmbed = componentFactory<\n    typeof _LiveboardEmbed,\n    LiveboardProps,\n    LiveboardViewConfig\n>(_LiveboardEmbed);\n\nexport const PinboardEmbed = componentFactory<\n    typeof _LiveboardEmbed,\n    LiveboardProps,\n    LiveboardViewConfig\n>(_LiveboardEmbed);\n\nexport const useEmbedRef = (): React.MutableRefObject<TsEmbed> => {\n    return React.useRef<TsEmbed>(null);\n};\n"]},"metadata":{},"sourceType":"module"}