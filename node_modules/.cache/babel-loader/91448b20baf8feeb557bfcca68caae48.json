{"ast":null,"code":"import { OperationType } from '../types';\nexport function getAnswerServiceInstance(session, query, operation, thoughtSpotHost) {\n  let variable;\n\n  const fetchQuery = async variables => {\n    try {\n      const response = await fetch(`${thoughtSpotHost}/prism/?op=${operation}`, {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json;charset=UTF-8',\n          'x-requested-by': 'ThoughtSpot',\n          accept: '*/*',\n          'accept-language': 'en-us'\n        },\n        body: JSON.stringify({\n          operationName: operation,\n          query,\n          variables\n        }),\n        credentials: 'include'\n      });\n      const result = await response.json();\n      return result.data;\n    } catch (error) {\n      return error;\n    }\n  };\n\n  const fetchData = (offset, batchSize) => {\n    if (operation === OperationType.GetChartWithData) {\n      variable = {\n        batchSize,\n        offset: offset * batchSize\n      };\n    } else {\n      variable = {\n        dataPaginationParams: {\n          isClientPaginated: true,\n          offset: offset * batchSize,\n          size: batchSize\n        }\n      };\n    }\n\n    return fetchQuery({\n      session,\n      ...variable\n    });\n  };\n\n  return {\n    fetchData\n  };\n}","map":{"version":3,"mappings":"AAAA,SAA2BA,aAA3B,QAAgD,UAAhD;AAEA,OAAM,SAAUC,wBAAV,CACFC,OADE,EAEFC,KAFE,EAGFC,SAHE,EAIFC,eAJE,EAIqB;AAEvB,MAAIC,QAAJ;;AAEA,QAAMC,UAAU,GAAG,MAAOC,SAAP,IAAyB;AACxC,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CACxB,GAAGL,eAAe,cAAcD,SAAS,EADjB,EAExB;AACIO,cAAM,EAAE,MADZ;AAEIC,eAAO,EAAE;AACL,0BAAgB,gCADX;AAEL,4BAAkB,aAFb;AAGLC,gBAAM,EAAE,KAHH;AAIL,6BAAmB;AAJd,SAFb;AAQIC,YAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,uBAAa,EAAEb,SADE;AAEjBD,eAFiB;AAGjBK;AAHiB,SAAf,CARV;AAaIU,mBAAW,EAAE;AAbjB,OAFwB,CAA5B;AAkBA,YAAMC,MAAM,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAArB;AACA,aAAOD,MAAM,CAACE,IAAd;AACH,KArBD,CAqBE,OAAOC,KAAP,EAAc;AACZ,aAAOA,KAAP;AACH;AACJ,GAzBD;;AA2BA,QAAMC,SAAS,GAAG,CAACC,MAAD,EAAiBC,SAAjB,KAAsC;AACpD,QAAIrB,SAAS,KAAKJ,aAAa,CAAC0B,gBAAhC,EAAkD;AAC9CpB,cAAQ,GAAG;AAAEmB,iBAAF;AAAaD,cAAM,EAAEA,MAAM,GAAGC;AAA9B,OAAX;AACH,KAFD,MAEO;AACHnB,cAAQ,GAAG;AACPqB,4BAAoB,EAAE;AAClBC,2BAAiB,EAAE,IADD;AAElBJ,gBAAM,EAAEA,MAAM,GAAGC,SAFC;AAGlBI,cAAI,EAAEJ;AAHY;AADf,OAAX;AAOH;;AACD,WAAOlB,UAAU,CAAC;AACdL,aADc;AAEd,SAAGI;AAFW,KAAD,CAAjB;AAIH,GAhBD;;AAkBA,SAAO;AACHiB;AADG,GAAP;AAGH","names":["OperationType","getAnswerServiceInstance","session","query","operation","thoughtSpotHost","variable","fetchQuery","variables","response","fetch","method","headers","accept","body","JSON","stringify","operationName","credentials","result","json","data","error","fetchData","offset","batchSize","GetChartWithData","dataPaginationParams","isClientPaginated","size"],"sources":["/Users/nathan.schroeder/Documents/dev/TSIntegrationDemo/ts-integration-demo/node_modules/@thoughtspot/visual-embed-sdk/src/utils/answerService.ts"],"sourcesContent":["import { SessionInterface, OperationType } from '../types';\n\nexport function getAnswerServiceInstance(\n    session: SessionInterface,\n    query: string,\n    operation: string,\n    thoughtSpotHost: string,\n): any {\n    let variable: any;\n\n    const fetchQuery = async (variables: any) => {\n        try {\n            const response = await fetch(\n                `${thoughtSpotHost}/prism/?op=${operation}`,\n                {\n                    method: 'POST',\n                    headers: {\n                        'content-type': 'application/json;charset=UTF-8',\n                        'x-requested-by': 'ThoughtSpot',\n                        accept: '*/*',\n                        'accept-language': 'en-us',\n                    },\n                    body: JSON.stringify({\n                        operationName: operation,\n                        query,\n                        variables,\n                    }),\n                    credentials: 'include',\n                },\n            );\n            const result = await response.json();\n            return result.data;\n        } catch (error) {\n            return error;\n        }\n    };\n\n    const fetchData = (offset: number, batchSize: number) => {\n        if (operation === OperationType.GetChartWithData) {\n            variable = { batchSize, offset: offset * batchSize };\n        } else {\n            variable = {\n                dataPaginationParams: {\n                    isClientPaginated: true,\n                    offset: offset * batchSize,\n                    size: batchSize,\n                },\n            };\n        }\n        return fetchQuery({\n            session,\n            ...variable,\n        });\n    };\n\n    return {\n        fetchData,\n    };\n}\n"]},"metadata":{},"sourceType":"module"}