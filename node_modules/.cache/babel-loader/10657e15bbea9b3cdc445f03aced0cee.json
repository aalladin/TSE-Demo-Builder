{"ast":null,"code":"import * as mixpanel from 'mixpanel-browser';\nexport const EndPoints = {\n  CONFIG: '/callosum/v1/system/config'\n};\nexport const MIXPANEL_EVENT = {\n  VISUAL_SDK_RENDER_START: 'visual-sdk-render-start',\n  VISUAL_SDK_CALLED_INIT: 'visual-sdk-called-init',\n  VISUAL_SDK_RENDER_COMPLETE: 'visual-sdk-render-complete',\n  VISUAL_SDK_RENDER_FAILED: 'visual-sdk-render-failed',\n  VISUAL_SDK_TRIGGER: 'visual-sdk-trigger',\n  VISUAL_SDK_IFRAME_LOAD_PERFORMANCE: 'visual-sdk-iframe-load-performance'\n};\nlet isEventCollectorOn = false;\nconst eventCollectorQueue = [];\n\nfunction setEventCollectorOn() {\n  isEventCollectorOn = true;\n}\n\nfunction getEventCollectorOnValue() {\n  return isEventCollectorOn;\n}\n/**\n * Pushes the event with its Property key-value map to mixpanel.\n * @param eventId\n * @param eventProps\n */\n\n\nexport async function uploadMixpanelEvent(eventId) {\n  let eventProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!getEventCollectorOnValue()) {\n    eventCollectorQueue.push({\n      eventId,\n      eventProps\n    });\n    return Promise.resolve();\n  }\n\n  return new Promise(() => mixpanel.track(eventId, eventProps));\n}\n\nfunction emptyQueue() {\n  eventCollectorQueue.forEach(event => {\n    uploadMixpanelEvent(event.eventId, event.eventProps);\n  });\n}\n\nexport function initMixpanel(sessionInfo) {\n  if (!sessionInfo || !sessionInfo.mixpanelToken) {\n    return;\n  } // On a public cluster the user is anonymous, so don't set the identify to userGUID\n\n\n  const isPublicCluster = !!sessionInfo.isPublicUser;\n  const token = sessionInfo.mixpanelToken;\n\n  if (token) {\n    mixpanel.init(token);\n\n    if (!isPublicCluster) {\n      mixpanel.identify(sessionInfo.userGUID);\n    }\n\n    setEventCollectorOn();\n    emptyQueue();\n  }\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,kBAA1B;AAEA,OAAO,MAAMC,SAAS,GAAG;AACrBC,QAAM,EAAE;AADa,CAAlB;AAIP,OAAO,MAAMC,cAAc,GAAG;AAC1BC,yBAAuB,EAAE,yBADC;AAE1BC,wBAAsB,EAAE,wBAFE;AAG1BC,4BAA0B,EAAE,4BAHF;AAI1BC,0BAAwB,EAAE,0BAJA;AAK1BC,oBAAkB,EAAE,oBALM;AAM1BC,oCAAkC,EAAE;AANV,CAAvB;AASP,IAAIC,kBAAkB,GAAG,KAAzB;AACA,MAAMC,mBAAmB,GAA2C,EAApE;;AAEA,SAASC,mBAAT,GAA4B;AACxBF,oBAAkB,GAAG,IAArB;AACH;;AAED,SAASG,wBAAT,GAAiC;AAC7B,SAAOH,kBAAP;AACH;AAED;;;;;;;AAKA,OAAO,eAAeI,mBAAf,CACHC,OADG,EAEY;AAAA,MAAfC,UAAe,uEAAF,EAAE;;AAEf,MAAI,CAACH,wBAAwB,EAA7B,EAAiC;AAC7BF,uBAAmB,CAACM,IAApB,CAAyB;AAAEF,aAAF;AAAWC;AAAX,KAAzB;AACA,WAAOE,OAAO,CAACC,OAAR,EAAP;AACH;;AACD,SAAO,IAAID,OAAJ,CAAY,MAAMlB,QAAQ,CAACoB,KAAT,CAAeL,OAAf,EAAwBC,UAAxB,CAAlB,CAAP;AACH;;AAED,SAASK,UAAT,GAAmB;AACfV,qBAAmB,CAACW,OAApB,CAA6BC,KAAD,IAAU;AAClCT,uBAAmB,CAACS,KAAK,CAACR,OAAP,EAAgBQ,KAAK,CAACP,UAAtB,CAAnB;AACH,GAFD;AAGH;;AAED,OAAM,SAAUQ,YAAV,CAAuBC,WAAvB,EAAuC;AACzC,MAAI,CAACA,WAAD,IAAgB,CAACA,WAAW,CAACC,aAAjC,EAAgD;AAC5C;AACH,GAHwC,CAIzC;;;AACA,QAAMC,eAAe,GAAG,CAAC,CAACF,WAAW,CAACG,YAAtC;AACA,QAAMC,KAAK,GAAGJ,WAAW,CAACC,aAA1B;;AACA,MAAIG,KAAJ,EAAW;AACP7B,YAAQ,CAAC8B,IAAT,CAAcD,KAAd;;AACA,QAAI,CAACF,eAAL,EAAsB;AAClB3B,cAAQ,CAAC+B,QAAT,CAAkBN,WAAW,CAACO,QAA9B;AACH;;AACDpB,uBAAmB;AACnBS,cAAU;AACb;AACJ","names":["mixpanel","EndPoints","CONFIG","MIXPANEL_EVENT","VISUAL_SDK_RENDER_START","VISUAL_SDK_CALLED_INIT","VISUAL_SDK_RENDER_COMPLETE","VISUAL_SDK_RENDER_FAILED","VISUAL_SDK_TRIGGER","VISUAL_SDK_IFRAME_LOAD_PERFORMANCE","isEventCollectorOn","eventCollectorQueue","setEventCollectorOn","getEventCollectorOnValue","uploadMixpanelEvent","eventId","eventProps","push","Promise","resolve","track","emptyQueue","forEach","event","initMixpanel","sessionInfo","mixpanelToken","isPublicCluster","isPublicUser","token","init","identify","userGUID"],"sources":["/Users/nathan.schroeder/Documents/dev/TSIntegrationDemo/ts-integration-demo/node_modules/@thoughtspot/visual-embed-sdk/src/mixpanel-service.ts"],"sourcesContent":["import * as mixpanel from 'mixpanel-browser';\n\nexport const EndPoints = {\n    CONFIG: '/callosum/v1/system/config',\n};\n\nexport const MIXPANEL_EVENT = {\n    VISUAL_SDK_RENDER_START: 'visual-sdk-render-start',\n    VISUAL_SDK_CALLED_INIT: 'visual-sdk-called-init',\n    VISUAL_SDK_RENDER_COMPLETE: 'visual-sdk-render-complete',\n    VISUAL_SDK_RENDER_FAILED: 'visual-sdk-render-failed',\n    VISUAL_SDK_TRIGGER: 'visual-sdk-trigger',\n    VISUAL_SDK_IFRAME_LOAD_PERFORMANCE: 'visual-sdk-iframe-load-performance',\n};\n\nlet isEventCollectorOn = false;\nconst eventCollectorQueue: { eventId: string; eventProps: any }[] = [];\n\nfunction setEventCollectorOn() {\n    isEventCollectorOn = true;\n}\n\nfunction getEventCollectorOnValue() {\n    return isEventCollectorOn;\n}\n\n/**\n * Pushes the event with its Property key-value map to mixpanel.\n * @param eventId\n * @param eventProps\n */\nexport async function uploadMixpanelEvent(\n    eventId: string,\n    eventProps = {},\n): Promise<any> {\n    if (!getEventCollectorOnValue()) {\n        eventCollectorQueue.push({ eventId, eventProps });\n        return Promise.resolve();\n    }\n    return new Promise(() => mixpanel.track(eventId, eventProps));\n}\n\nfunction emptyQueue() {\n    eventCollectorQueue.forEach((event) => {\n        uploadMixpanelEvent(event.eventId, event.eventProps);\n    });\n}\n\nexport function initMixpanel(sessionInfo: any): void {\n    if (!sessionInfo || !sessionInfo.mixpanelToken) {\n        return;\n    }\n    // On a public cluster the user is anonymous, so don't set the identify to userGUID\n    const isPublicCluster = !!sessionInfo.isPublicUser;\n    const token = sessionInfo.mixpanelToken;\n    if (token) {\n        mixpanel.init(token);\n        if (!isPublicCluster) {\n            mixpanel.identify(sessionInfo.userGUID);\n        }\n        setEventCollectorOn();\n        emptyQueue();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}