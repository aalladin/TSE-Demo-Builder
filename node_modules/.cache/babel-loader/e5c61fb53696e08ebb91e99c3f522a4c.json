{"ast":null,"code":"var _jsxFileName = \"/Users/nathan.schroeder/Documents/dev/TSIntegrationDemo/ts-integration-demo/src/Content.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, setState } from 'react';\nimport { init, AuthType } from '@thoughtspot/visual-embed-sdk';\nimport { SearchEmbed, LiveboardEmbed } from '@thoughtspot/visual-embed-sdk/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Content(props) {\n  _s();\n\n  const {\n    settings\n  } = props;\n  const thoughtspot_URL = \"https://se-thoughtspot-cloud.thoughtspot.cloud/#\";\n  const [renderType, setRenderType] = useState('');\n  const [renderContent, setRenderContent] = useState('');\n  useEffect(() => {\n    console.log(thoughtspot_URL);\n    init({\n      thoughtSpotHost: thoughtspot_URL,\n      authType: AuthType.None\n    });\n  }, []);\n\n  function renderLink(type, content) {}\n\n  const leftMenu = {\n    background: settings.primaryColor,\n    width: '150px',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column'\n  };\n\n  if (settings.links) {\n    var linkContainers = settings.links.map(link => /*#__PURE__*/_jsxDEV(LinkContainer, {\n      id: link,\n      name: settings.linkNames[link],\n      content: settings.linkContents[link],\n      type: settings.linkTypes[link],\n      renderLink: renderLink\n    }, link, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }, this));\n  }\n\n  var renderPage = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Select a Link!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 18\n  }, this);\n\n  if (renderType == 'Search') {\n    renderPage = /*#__PURE__*/_jsxDEV(SearchEmbed, {\n      frameParams: {\n        width: '100%',\n        height: '100vh'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (renderType == 'Liveboard') {\n    renderPage = /*#__PURE__*/_jsxDEV(LiveboardEmbed, {\n      liveboardId: renderContent,\n      frameParams: {\n        width: '100%',\n        height: '100vh'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (renderType == 'Answer') {\n    renderPage = /*#__PURE__*/_jsxDEV(SearchEmbed, {\n      answerId: renderContent,\n      frameParams: {\n        width: '100%',\n        height: '100vh'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: leftMenu,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"logoImage\",\n        src: settings.logoImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), linkContainers]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"TSContainer\",\n      children: renderPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Content, \"m/hGcD3akG0Qz+XZBE9V2ztzIvo=\");\n\n_c = Content;\n\nfunction LinkContainer(props) {\n  const {\n    id,\n    name,\n    content,\n    type,\n    renderLink\n  } = props;\n\n  function handleLinkClick() {\n    renderLink(type, content);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"contentLink\",\n    onClick: handleLinkClick,\n    children: name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = LinkContainer;\nexport default Content;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Content\");\n$RefreshReg$(_c2, \"LinkContainer\");","map":{"version":3,"sources":["/Users/nathan.schroeder/Documents/dev/TSIntegrationDemo/ts-integration-demo/src/Content.js"],"names":["React","useState","useEffect","setState","init","AuthType","SearchEmbed","LiveboardEmbed","Content","props","settings","thoughtspot_URL","renderType","setRenderType","renderContent","setRenderContent","console","log","thoughtSpotHost","authType","None","renderLink","type","content","leftMenu","background","primaryColor","width","height","display","flexDirection","links","linkContainers","map","link","linkNames","linkContents","linkTypes","renderPage","logoImage","LinkContainer","id","name","handleLinkClick"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, setState } from 'react';\nimport { init,  AuthType} from '@thoughtspot/visual-embed-sdk';\nimport { SearchEmbed, LiveboardEmbed } from '@thoughtspot/visual-embed-sdk/react';\n\n\nfunction Content(props) {\nconst {\n  settings\n} = props\nconst thoughtspot_URL = \"https://se-thoughtspot-cloud.thoughtspot.cloud/#\" \n\nconst [renderType, setRenderType] = useState('')\nconst [renderContent, setRenderContent] = useState('')\n\n\nuseEffect(() => {\n  console.log(thoughtspot_URL)\n  init({\n    thoughtSpotHost: thoughtspot_URL,\n    authType: AuthType.None,\n  });\n}, [])\n\nfunction renderLink(type,content){\n\n}\nconst leftMenu = {\n  background: settings.primaryColor,\n  width: '150px',\n  height: '100%',\n  display: 'flex',\n  flexDirection: 'column',\n}\nif (settings.links){\n  var linkContainers   = settings.links.map(link => (\n    <LinkContainer\n      key={link}\n      id={link}\n      name={settings.linkNames[link]}\n      content={settings.linkContents[link]}\n      type={settings.linkTypes[link]}\n      renderLink={renderLink}\n    />\n  ));\n  \n}\nvar renderPage = <div>Select a Link!</div>\nif (renderType=='Search'){\n  renderPage = <SearchEmbed frameParams={{width:'100%',height:'100vh'}}\n  />\n}\nif (renderType=='Liveboard'){\n  renderPage = <LiveboardEmbed liveboardId={renderContent} frameParams={{width:'100%',height:'100vh'}}\n  />\n}\nif (renderType=='Answer'){\n  renderPage = <SearchEmbed answerId={renderContent} frameParams={{width:'100%',height:'100vh'}}\n  />\n}\n\nreturn (\n  <div id=\"container\">\n      <div style={leftMenu}>\n          <img className=\"logoImage\" src={settings.logoImage}></img>\n      {linkContainers}\n      </div>\n      <div id=\"TSContainer\">\n        {renderPage}\n      </div>\n  </div>\n)\n}\nfunction LinkContainer(props){\n  const {\n    id,\n    name,\n    content,\n    type,\n    renderLink\n  } = props\n  \n  function handleLinkClick(){\n    renderLink(type, content)\n  }\n  return(\n    <div class=\"contentLink\" onClick={handleLinkClick}>\n        {name}\n    </div>\n  )\n}\nexport default Content;"]},"metadata":{},"sourceType":"module"}