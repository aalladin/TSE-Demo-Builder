{"ast":null,"code":"var _jsxFileName = \"/Users/nathan.schroeder/Documents/dev/TSIntegrationDemo/ts-integration-demo/src/App.js\",\n    _s = $RefreshSig$();\n\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Routes, Switch, Route, Link } from \"react-router-dom\";\nimport Settings from './Settings';\nimport Content from './Content';\nimport React, { useState, useEffect, setState } from 'react';\nimport { useLocalStorage } from \"./LocalStorage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst APP_VERSION = '1-0';\nlet initialLoad = true;\n\nfunction App() {\n  _s();\n\n  const [settings, setSettings] = useLocalStorage(\"settings\", \"\");\n  const [settingsVisible, setSettingsVisible] = useState('');\n  const [timeKey, setTimeKey] = useState('');\n\n  function applySettings(settings) {\n    setSettings(settings);\n    setTimeKey(Date.now());\n  }\n\n  function saveSettings(settings) {\n    var a = document.getElementById(\"saveButton\");\n    var file = new Blob([JSON.stringify(settings)], {\n      type: 'json'\n    });\n    a.href = URL.createObjectURL(file);\n    a.download = settings.name + 'v' + APP_VERSION;\n  }\n\n  function closeSettings(settings) {\n    setSettingsVisible(false);\n  }\n\n  function showSettings() {\n    setSettingsVisible(true);\n  }\n\n  function newSettings() {\n    setSettings({});\n    setTimeKey(Date.now());\n  }\n\n  const openSettings = file => {\n    const fileReader = new FileReader();\n    fileReader.readAsText(file);\n\n    fileReader.onload = () => {\n      var settings = JSON.parse(fileReader.result);\n      setSettings(settings);\n      setTimeKey(Date.now());\n    };\n  };\n\n  const popover = {\n    position: 'absolute',\n    zIndex: '2',\n    top: 50,\n    left: 300,\n    width: '600px',\n    height: '700px',\n    background: '#ffffff',\n    boxShadow: '0px 0px 250px #ededed',\n    padding: '25px'\n  };\n  useEffect(() => {\n    if (initialLoad) {\n      fetch('DefaultSettings.json').then(response => response.json).then(data => {\n        setSettings(data);\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Content, {\n      settings: settings,\n      showSettings: showSettings,\n      newSettings: newSettings\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), settingsVisible ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: popover,\n      children: /*#__PURE__*/_jsxDEV(Settings, {\n        openSettings: openSettings,\n        applySettings: applySettings,\n        saveSettings: saveSettings,\n        settings: settings,\n        closeSettings: closeSettings,\n        newSettings: newSettings\n      }, timeKey, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 27\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"00yqWLjv8ySt+RbHlaRn3zhbotE=\", false, function () {\n  return [useLocalStorage];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/nathan.schroeder/Documents/dev/TSIntegrationDemo/ts-integration-demo/src/App.js"],"names":["logo","BrowserRouter","Router","Routes","Switch","Route","Link","Settings","Content","React","useState","useEffect","setState","useLocalStorage","APP_VERSION","initialLoad","App","settings","setSettings","settingsVisible","setSettingsVisible","timeKey","setTimeKey","applySettings","Date","now","saveSettings","a","document","getElementById","file","Blob","JSON","stringify","type","href","URL","createObjectURL","download","name","closeSettings","showSettings","newSettings","openSettings","fileReader","FileReader","readAsText","onload","parse","result","popover","position","zIndex","top","left","width","height","background","boxShadow","padding","fetch","then","response","json","data"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Switch,\n  Route,\n  Link,\n  \n} from \"react-router-dom\";\nimport Settings from './Settings'\nimport Content from './Content'\nimport React, { useState, useEffect, setState } from 'react';\nimport { useLocalStorage } from \"./LocalStorage\";\n\nconst APP_VERSION = '1-0'\nlet initialLoad = true;\n\nfunction App() {\n  const [settings, setSettings] = useLocalStorage(\"settings\", \"\");\n  const [settingsVisible, setSettingsVisible] = useState('')\n  const [timeKey, setTimeKey] = useState('')\n  function applySettings(settings){\n    setSettings(settings)\n    setTimeKey(Date.now());\n  }\n  function saveSettings(settings){\n    var a = document.getElementById(\"saveButton\");\n    var file = new Blob([JSON.stringify(settings)], {type: 'json'});\n    a.href = URL.createObjectURL(file);\n    a.download = settings.name+'v'+APP_VERSION;\n  }\n  function closeSettings(settings){\n    setSettingsVisible(false)\n  }\n  function showSettings(){\n    setSettingsVisible(true);\n  }\n  function newSettings(){\n    setSettings({});\n    setTimeKey(Date.now());\n  }\n  const openSettings = (file) => {\n    const fileReader = new FileReader();\n    fileReader.readAsText(file)\n    fileReader.onload = () => {\n      var settings = JSON.parse(fileReader.result)\n      setSettings(settings);\n      setTimeKey(Date.now());\n    }\n\n  }  \n\n  const popover = {\n    position: 'absolute',\n    zIndex: '2',\n    top:50,\n    left:300,\n    width:'600px',\n    height:'700px',\n    background:'#ffffff',\n    boxShadow: '0px 0px 250px #ededed',\n    padding:'25px'\n  }\n\n  useEffect(() => {\n    if (initialLoad){\n      fetch('DefaultSettings.json').then(response => response.json).then(data => {\n        setSettings(data)\n      })\n    }\n  }, [])\n  \n  return(\n    <div>\n      <Content settings={settings} showSettings={showSettings} newSettings={newSettings}/>\n      { settingsVisible ? <div style={ popover }>\n      <Settings openSettings={openSettings} applySettings={applySettings} saveSettings={saveSettings} settings={settings} closeSettings={closeSettings} newSettings={newSettings} key={timeKey} />  \n      </div> : null }\n          \n    </div>\n\n\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}