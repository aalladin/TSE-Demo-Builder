{"ast":null,"code":"import { EmbedEvent } from '../types';\nexport function getViewPropsAndListeners(props) {\n  return Object.keys(props).reduce((accu, key) => {\n    if (key.startsWith('on')) {\n      const eventName = key.substr(2);\n      accu.listeners[EmbedEvent[eventName]] = props[key];\n    } else {\n      accu.viewConfig[key] = props[key];\n    }\n\n    return accu;\n  }, {\n    viewConfig: {},\n    listeners: {}\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,QAA4C,UAA5C;AAgBA,OAAM,SAAUC,wBAAV,CAA+EC,KAA/E,EAAuF;AACzF,SAAOC,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBG,MAAnB,CACH,CAACC,IAAD,EAAOC,GAAP,KAAc;AACV,QAAIA,GAAG,CAACC,UAAJ,CAAe,IAAf,CAAJ,EAA0B;AACtB,YAAMC,SAAS,GAAGF,GAAG,CAACG,MAAJ,CAAW,CAAX,CAAlB;AACAJ,UAAI,CAACK,SAAL,CAAeX,UAAU,CAACS,SAAD,CAAzB,IAAwCP,KAAK,CAACK,GAAD,CAA7C;AACH,KAHD,MAGO;AACHD,UAAI,CAACM,UAAL,CAAgBL,GAAhB,IAAuBL,KAAK,CAACK,GAAD,CAA5B;AACH;;AACD,WAAOD,IAAP;AACH,GATE,EAUH;AACIM,cAAU,EAAE,EADhB;AAEID,aAAS,EAAE;AAFf,GAVG,CAAP;AAeH","names":["EmbedEvent","getViewPropsAndListeners","props","Object","keys","reduce","accu","key","startsWith","eventName","substr","listeners","viewConfig"],"sources":["/Users/nathan.schroeder/Documents/dev/TSIntegrationDemo/ts-integration-demo/node_modules/@thoughtspot/visual-embed-sdk/src/react/util.ts"],"sourcesContent":["import { EmbedEvent, MessageCallback } from '../types';\nimport { ViewConfig } from '../embed/ts-embed';\n\n// eslint-disable-next-line prettier/prettier\nexport type EmbedEventHandlers = { [key in keyof typeof EmbedEvent as `on${Capitalize<key>}`]?: MessageCallback };\n\n\nexport interface EmbedProps extends ViewConfig, EmbedEventHandlers {\n    className?: string;\n}\n\nexport interface ViewConfigAndListeners<T extends ViewConfig> {\n    viewConfig: T;\n    listeners: { [key in EmbedEvent]?: MessageCallback };\n}\n\nexport function getViewPropsAndListeners<T extends EmbedProps, U extends ViewConfig>(props: T): ViewConfigAndListeners<U> {\n    return Object.keys(props).reduce(\n        (accu, key) => {\n            if (key.startsWith('on')) {\n                const eventName = key.substr(2);\n                accu.listeners[EmbedEvent[eventName]] = props[key];\n            } else {\n                accu.viewConfig[key] = props[key];\n            }\n            return accu;\n        },\n        {\n            viewConfig: {} as U,\n            listeners: {},\n        },\n    );\n}"]},"metadata":{},"sourceType":"module"}