{"ast":null,"code":"/**\n * Copyright (c) 2022\n *\n * Embed ThoughtSpot search or a saved answer\n *\n * @summary Search embed\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nimport { DataSourceVisualMode, Param, Action } from '../types';\nimport { getQueryParamString } from '../utils';\nimport { TsEmbed } from './ts-embed';\nexport const HiddenActionItemByDefaultForSearchEmbed = [Action.EditACopy, Action.SaveAsView, Action.UpdateTML, Action.EditTML, Action.AnswerDelete];\n/**\n * Embed ThoughtSpot search\n *\n * @Category Search Embed\n */\n\nexport class SearchEmbed extends TsEmbed {\n  constructor(domSelector, viewConfig) {\n    super(domSelector);\n    this.viewConfig = viewConfig;\n  }\n  /**\n   * Get the state of the data sources panel that the embedded\n   * ThoughtSpot search will be initialized with.\n   */\n\n\n  getDataSourceMode() {\n    let dataSourceMode = DataSourceVisualMode.Expanded;\n\n    if (this.viewConfig.collapseDataSources === true) {\n      dataSourceMode = DataSourceVisualMode.Collapsed;\n    }\n\n    if (this.viewConfig.hideDataSources === true) {\n      dataSourceMode = DataSourceVisualMode.Hidden;\n    }\n\n    return dataSourceMode;\n  }\n  /**\n   * Construct the URL of the embedded ThoughtSpot search to be\n   * loaded in the iframe\n   * @param answerId The GUID of a saved answer\n   * @param dataSources A list of data source GUIDs\n   */\n\n\n  getIFrameSrc(answerId, dataSources) {\n    var _a;\n\n    const {\n      hideResults,\n      expandAllDataSource,\n      enableSearchAssist,\n      forceTable,\n      searchOptions\n    } = this.viewConfig;\n    const answerPath = answerId ? `saved-answer/${answerId}` : 'answer';\n    const queryParams = this.getBaseQueryParams();\n    queryParams[Param.HideActions] = [...((_a = queryParams[Param.HideActions]) !== null && _a !== void 0 ? _a : []), ...HiddenActionItemByDefaultForSearchEmbed];\n\n    if (dataSources && dataSources.length) {\n      queryParams[Param.DataSources] = JSON.stringify(dataSources);\n    }\n\n    if (searchOptions === null || searchOptions === void 0 ? void 0 : searchOptions.searchTokenString) {\n      queryParams[Param.searchTokenString] = encodeURIComponent(searchOptions.searchTokenString);\n\n      if (searchOptions.executeSearch) {\n        queryParams[Param.executeSearch] = true;\n      }\n    }\n\n    if (enableSearchAssist) {\n      queryParams[Param.EnableSearchAssist] = true;\n    }\n\n    if (hideResults) {\n      queryParams[Param.HideResult] = true;\n    }\n\n    if (forceTable) {\n      queryParams[Param.ForceTable] = true;\n    }\n\n    queryParams[Param.DataSourceMode] = this.getDataSourceMode();\n    queryParams[Param.UseLastSelectedDataSource] = false;\n    queryParams[Param.searchEmbed] = true;\n    let query = '';\n    const queryParamsString = getQueryParamString(queryParams, true);\n\n    if (queryParamsString) {\n      query = `?${queryParamsString}`;\n    }\n\n    return `${this.getEmbedBasePath(query)}/${answerPath}`;\n  }\n  /**\n   * Render the embedded ThoughtSpot search\n   */\n\n\n  render() {\n    super.render();\n    const {\n      answerId,\n      dataSources\n    } = this.viewConfig;\n    const src = this.getIFrameSrc(answerId, dataSources);\n    this.renderIFrame(src, this.viewConfig.frameParams);\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["DataSourceVisualMode","Param","Action","getQueryParamString","TsEmbed","HiddenActionItemByDefaultForSearchEmbed","EditACopy","SaveAsView","UpdateTML","EditTML","AnswerDelete","SearchEmbed","constructor","domSelector","viewConfig","getDataSourceMode","dataSourceMode","Expanded","collapseDataSources","Collapsed","hideDataSources","Hidden","getIFrameSrc","answerId","dataSources","hideResults","expandAllDataSource","enableSearchAssist","forceTable","searchOptions","answerPath","queryParams","getBaseQueryParams","HideActions","_a","length","DataSources","JSON","stringify","searchTokenString","encodeURIComponent","executeSearch","EnableSearchAssist","HideResult","ForceTable","DataSourceMode","UseLastSelectedDataSource","searchEmbed","query","queryParamsString","getEmbedBasePath","render","src","renderIFrame","frameParams"],"sources":["/Users/nathan.schroeder/Documents/dev/TSIntegrationDemo/ts-integration-demo/node_modules/@thoughtspot/visual-embed-sdk/src/embed/search.ts"],"sourcesContent":["/**\n * Copyright (c) 2022\n *\n * Embed ThoughtSpot search or a saved answer\n *\n * @summary Search embed\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\n\nimport { DataSourceVisualMode, DOMSelector, Param, Action } from '../types';\nimport { getQueryParamString } from '../utils';\nimport { ViewConfig, TsEmbed } from './ts-embed';\nimport { version } from '../../package.json';\n\n/**\n * Configuration for search options\n */\ninterface SearchOptions {\n    /**\n     * The tml string to load the answer\n     */\n    searchTokenString: string;\n    /**\n     * Boolean to determine if the search should be executed or not.\n     * if it is executed, put the focus on the results.\n     * if itâ€™s not executed, put the focus in the search bar - at the end of the tokens\n     */\n    executeSearch?: boolean;\n}\n\n/**\n * The configuration attributes for the embedded search view.\n *\n * @Category Search Embed\n */\nexport interface SearchViewConfig extends ViewConfig {\n    /**\n     * If set to true, the data sources panel is collapsed on load,\n     * but can be expanded manually.\n     */\n    collapseDataSources?: boolean;\n    /**\n     * If set to true, hides the data sources panel.\n     */\n    hideDataSources?: boolean;\n    /**\n     * If set to true, hides the charts and tables in search answers.\n     * This attribute can be used to create a custom visualization\n     * using raw answer data.\n     */\n    hideResults?: boolean;\n    /**\n     * If set to true, expands all the data sources panel.\n     */\n    expandAllDataSource?: boolean;\n    /**\n     * If set to true, the Search Assist feature is enabled.\n     */\n    enableSearchAssist?: boolean;\n    /**\n     * If set to true, the tabular view is set as the default\n     * format for presenting search data.\n     */\n    forceTable?: boolean;\n    /**\n     * The array of data source GUIDs to set on load.\n     */\n    dataSources?: string[];\n    /**\n     * The initial search query to load the answer with.\n     * @deprecated Use {@link searchOptions} instead\n     */\n    searchQuery?: string;\n    /**\n     * Configuration for search options\n     */\n    searchOptions?: SearchOptions;\n    /**\n     * The GUID of a saved answer to load initially.\n     */\n    answerId?: string;\n}\n\nexport const HiddenActionItemByDefaultForSearchEmbed = [\n    Action.EditACopy,\n    Action.SaveAsView,\n    Action.UpdateTML,\n    Action.EditTML,\n    Action.AnswerDelete,\n];\n\n/**\n * Embed ThoughtSpot search\n *\n * @Category Search Embed\n */\nexport class SearchEmbed extends TsEmbed {\n    /**\n     * The view configuration for the embedded ThoughtSpot search.\n     */\n    protected viewConfig: SearchViewConfig;\n\n    constructor(domSelector: DOMSelector, viewConfig: SearchViewConfig) {\n        super(domSelector);\n        this.viewConfig = viewConfig;\n    }\n\n    /**\n     * Get the state of the data sources panel that the embedded\n     * ThoughtSpot search will be initialized with.\n     */\n    private getDataSourceMode() {\n        let dataSourceMode = DataSourceVisualMode.Expanded;\n        if (this.viewConfig.collapseDataSources === true) {\n            dataSourceMode = DataSourceVisualMode.Collapsed;\n        }\n        if (this.viewConfig.hideDataSources === true) {\n            dataSourceMode = DataSourceVisualMode.Hidden;\n        }\n\n        return dataSourceMode;\n    }\n\n    /**\n     * Construct the URL of the embedded ThoughtSpot search to be\n     * loaded in the iframe\n     * @param answerId The GUID of a saved answer\n     * @param dataSources A list of data source GUIDs\n     */\n    private getIFrameSrc(answerId: string, dataSources?: string[]) {\n        const {\n            hideResults,\n            expandAllDataSource,\n            enableSearchAssist,\n            forceTable,\n            searchOptions,\n        } = this.viewConfig;\n        const answerPath = answerId ? `saved-answer/${answerId}` : 'answer';\n        const queryParams = this.getBaseQueryParams();\n\n        queryParams[Param.HideActions] = [\n            ...(queryParams[Param.HideActions] ?? []),\n            ...HiddenActionItemByDefaultForSearchEmbed,\n        ];\n\n        if (dataSources && dataSources.length) {\n            queryParams[Param.DataSources] = JSON.stringify(dataSources);\n        }\n        if (searchOptions?.searchTokenString) {\n            queryParams[Param.searchTokenString] = encodeURIComponent(\n                searchOptions.searchTokenString,\n            );\n\n            if (searchOptions.executeSearch) {\n                queryParams[Param.executeSearch] = true;\n            }\n        }\n        if (enableSearchAssist) {\n            queryParams[Param.EnableSearchAssist] = true;\n        }\n        if (hideResults) {\n            queryParams[Param.HideResult] = true;\n        }\n        if (forceTable) {\n            queryParams[Param.ForceTable] = true;\n        }\n\n        queryParams[Param.DataSourceMode] = this.getDataSourceMode();\n        queryParams[Param.UseLastSelectedDataSource] = false;\n        queryParams[Param.searchEmbed] = true;\n        let query = '';\n        const queryParamsString = getQueryParamString(queryParams, true);\n        if (queryParamsString) {\n            query = `?${queryParamsString}`;\n        }\n\n        return `${this.getEmbedBasePath(query)}/${answerPath}`;\n    }\n\n    /**\n     * Render the embedded ThoughtSpot search\n     */\n    public render(): SearchEmbed {\n        super.render();\n        const { answerId, dataSources } = this.viewConfig;\n\n        const src = this.getIFrameSrc(answerId, dataSources);\n        this.renderIFrame(src, this.viewConfig.frameParams);\n        return this;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}