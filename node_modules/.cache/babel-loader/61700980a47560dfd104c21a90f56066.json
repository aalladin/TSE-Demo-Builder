{"ast":null,"code":"import { getEmbedConfig, handleAuth } from '../embed/base';\nimport { initSession } from '../auth';\nimport { EmbedEvent, OperationType } from '../types';\nimport { getAnswerServiceInstance } from './answerService';\nexport function processCustomAction(e, thoughtSpotHost) {\n  var _a;\n\n  if ([OperationType.GetChartWithData, OperationType.GetTableWithHeadlineData].includes((_a = e.data) === null || _a === void 0 ? void 0 : _a.operation)) {\n    const {\n      session,\n      query,\n      operation\n    } = e.data;\n    const answerService = getAnswerServiceInstance(session, query, operation, thoughtSpotHost);\n    return { ...e,\n      answerService\n    };\n  }\n\n  return e;\n}\n\nfunction processAuthInit(e) {\n  var _a, _b; // Store user session details sent by app.\n\n\n  initSession(e.data); // Expose only allowed details (eg: userGUID) back to SDK users.\n\n  return { ...e,\n    data: {\n      userGUID: ((_a = e.data) === null || _a === void 0 ? void 0 : _a.userGUID) || ((_b = e.payload) === null || _b === void 0 ? void 0 : _b.userGUID)\n    }\n  };\n}\n\nfunction processAuthExpire(e) {\n  const {\n    autoLogin = false\n  } = getEmbedConfig(); // Set default to false\n\n  if (autoLogin) {\n    handleAuth();\n  }\n\n  return e;\n}\n\nexport function getProcessData(type, e, thoughtSpotHost) {\n  switch (type) {\n    case EmbedEvent.CustomAction:\n      return processCustomAction(e, thoughtSpotHost);\n\n    case EmbedEvent.AuthInit:\n      return processAuthInit(e);\n\n    case EmbedEvent.AuthExpire:\n      return processAuthExpire(e);\n\n    default:\n  }\n\n  return e;\n}","map":{"version":3,"mappings":"AAAA,SAASA,cAAT,EAAyBC,UAAzB,QAA2C,eAA3C;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,SAASC,UAAT,EAAqBC,aAArB,QAA0C,UAA1C;AACA,SAASC,wBAAT,QAAyC,iBAAzC;AAEA,OAAM,SAAUC,mBAAV,CAA8BC,CAA9B,EAAsCC,eAAtC,EAA6D;;;AAC/D,MACI,CACIJ,aAAa,CAACK,gBADlB,EAEIL,aAAa,CAACM,wBAFlB,EAGEC,QAHF,CAGW,OAAC,CAACC,IAAF,MAAM,IAAN,IAAMC,aAAN,GAAM,MAAN,GAAMA,GAAEC,SAHnB,CADJ,EAKE;AACE,UAAM;AAAEC,aAAF;AAAWC,WAAX;AAAkBF;AAAlB,QAAgCP,CAAC,CAACK,IAAxC;AACA,UAAMK,aAAa,GAAGZ,wBAAwB,CAC1CU,OAD0C,EAE1CC,KAF0C,EAG1CF,SAH0C,EAI1CN,eAJ0C,CAA9C;AAMA,WAAO,EACH,GAAGD,CADA;AAEHU;AAFG,KAAP;AAIH;;AACD,SAAOV,CAAP;AACH;;AAED,SAASW,eAAT,CAAyBX,CAAzB,EAA+B;aAAA,CAC3B;;;AACAL,aAAW,CAACK,CAAC,CAACK,IAAH,CAAX,CAF2B,CAI3B;;AACA,SAAO,EACH,GAAGL,CADA;AAEHK,QAAI,EAAE;AACFO,cAAQ,EAAE,QAAC,CAACP,IAAF,MAAM,IAAN,IAAMC,aAAN,GAAM,MAAN,GAAMA,GAAEM,QAAR,MAAoB,OAAC,CAACC,OAAF,MAAS,IAAT,IAASC,aAAT,GAAS,MAAT,GAASA,GAAEF,QAA/B;AADR;AAFH,GAAP;AAMH;;AAED,SAASG,iBAAT,CAA2Bf,CAA3B,EAAiC;AAC7B,QAAM;AAAEgB,aAAS,GAAG;AAAd,MAAwBvB,cAAc,EAA5C,CAD6B,CACmB;;AAChD,MAAIuB,SAAJ,EAAe;AACXtB,cAAU;AACb;;AACD,SAAOM,CAAP;AACH;;AAED,OAAM,SAAUiB,cAAV,CACFC,IADE,EAEFlB,CAFE,EAGFC,eAHE,EAGqB;AAEvB,UAAQiB,IAAR;AACI,SAAKtB,UAAU,CAACuB,YAAhB;AACI,aAAOpB,mBAAmB,CAACC,CAAD,EAAIC,eAAJ,CAA1B;;AACJ,SAAKL,UAAU,CAACwB,QAAhB;AACI,aAAOT,eAAe,CAACX,CAAD,CAAtB;;AACJ,SAAKJ,UAAU,CAACyB,UAAhB;AACI,aAAON,iBAAiB,CAACf,CAAD,CAAxB;;AACJ;AAPJ;;AASA,SAAOA,CAAP;AACH","names":["getEmbedConfig","handleAuth","initSession","EmbedEvent","OperationType","getAnswerServiceInstance","processCustomAction","e","thoughtSpotHost","GetChartWithData","GetTableWithHeadlineData","includes","data","_a","operation","session","query","answerService","processAuthInit","userGUID","payload","_b","processAuthExpire","autoLogin","getProcessData","type","CustomAction","AuthInit","AuthExpire"],"sources":["/Users/nathan.schroeder/Documents/dev/ts-integration-demo/node_modules/@thoughtspot/visual-embed-sdk/src/utils/processData.ts"],"sourcesContent":["import { getEmbedConfig, handleAuth } from '../embed/base';\nimport { initSession } from '../auth';\nimport { EmbedEvent, OperationType } from '../types';\nimport { getAnswerServiceInstance } from './answerService';\n\nexport function processCustomAction(e: any, thoughtSpotHost: string) {\n    if (\n        [\n            OperationType.GetChartWithData,\n            OperationType.GetTableWithHeadlineData,\n        ].includes(e.data?.operation)\n    ) {\n        const { session, query, operation } = e.data;\n        const answerService = getAnswerServiceInstance(\n            session,\n            query,\n            operation,\n            thoughtSpotHost,\n        );\n        return {\n            ...e,\n            answerService,\n        };\n    }\n    return e;\n}\n\nfunction processAuthInit(e: any) {\n    // Store user session details sent by app.\n    initSession(e.data);\n\n    // Expose only allowed details (eg: userGUID) back to SDK users.\n    return {\n        ...e,\n        data: {\n            userGUID: e.data?.userGUID || e.payload?.userGUID,\n        },\n    };\n}\n\nfunction processAuthExpire(e: any) {\n    const { autoLogin = false } = getEmbedConfig(); // Set default to false\n    if (autoLogin) {\n        handleAuth();\n    }\n    return e;\n}\n\nexport function getProcessData(\n    type: EmbedEvent,\n    e: any,\n    thoughtSpotHost: string,\n) {\n    switch (type) {\n        case EmbedEvent.CustomAction:\n            return processCustomAction(e, thoughtSpotHost);\n        case EmbedEvent.AuthInit:\n            return processAuthInit(e);\n        case EmbedEvent.AuthExpire:\n            return processAuthExpire(e);\n        default:\n    }\n    return e;\n}\n"]},"metadata":{},"sourceType":"module"}